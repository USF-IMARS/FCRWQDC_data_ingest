---
title: "BROWARD Data"
format: html
params: 
  org_id: BROWARD #SFER #DERM_BBWQ  # must be BROWARD before rendering
---

Provider Data Assesment

```{R setup}
librarian::shelf(
  dplyr,
  glue,
  here,
  tidyr
)
```
```{R getData}
#| code-summary: read in the WIN txt pipe-delimited file
source(here("R/getData.R"))
df <- getData(params$org_id)

# Ensure the result value column is numeric (coerce if needed)
df$DEP.Result.Value.Number <- as.numeric(df$DEP.Result.Value.Number)
```

```{R create presence table}
library(dplyr)
library(tidyr)
library(ggplot2)

source(here::here("R/presenceTable.R"))

heat_long <- getPresenceHeatmapTable(df)
```

```{R analyte presence table, fig.width=10, fig.height= max(6, length(unique(heat_long$Monitoring.Location.ID)) * 0.2)}
plotHeatmap(heat_long)
```


```{R create map }
#| code-summary: create map with unique points

# check for missing lat/lon
if (all(is.na(df$Org.Decimal.Latitude)) || all(is.na(df$Org.Decimal.Longitude))) {
  cat("ERROR: All rows have missing latitude or longitude.")
} else {
  library(leaflet)
  library(dplyr)

  # 1. Filter out rows & keep only one per unique lat/lon
  df_unique_locs <- df %>%
    filter(!is.na(Org.Decimal.Latitude), !is.na(Org.Decimal.Longitude)) %>%
    distinct(Org.Decimal.Latitude, Org.Decimal.Longitude, .keep_all = TRUE)

  # 2. Plot all unique points (no clustering)
  leaflet(df_unique_locs) %>%
    addProviderTiles(providers$OpenStreetMap) %>%
    addCircleMarkers(
      lng         = ~Org.Decimal.Longitude,
      lat         = ~Org.Decimal.Latitude,
      radius      = 4,
      color       = "blue",
      fillOpacity = 0.5,
      popup       = ~paste0(
        "Monitoring Location: ", Monitoring.Location.ID
      )
      # clusterOptions removed to show every point at all zoom levels
    )
}
```

```{R prep data through time}
#| code-summary: visualize distribution of points through time
library(ggplot2)
library(lubridate)

# Convert Activity.Start.Date.Time to proper datetime if it isn't already
df$`Activity.Start.Date.Time` <- as.POSIXct(as.character(df$`Activity.Start.Date.Time`), format = "%m/%d/%Y %H:%M:%S")


# Create a dataframe with unique sampling events
sampling_events <- df %>%
  distinct(`Activity.Start.Date.Time`, Monitoring.Location.ID) %>%
  arrange(`Activity.Start.Date.Time`)
```

```{R time distribution plot}
#| code-summary: Create time distribution plot
ggplot(sampling_events, aes(x = `Activity.Start.Date.Time`)) +
  geom_histogram(bins = 30, fill = "steelblue", color = "white", alpha = 0.7) +
  labs(
    title = "Distribution of Sampling Events Over Time",
    x = "Date",
    y = "Number of Sampling Events"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    panel.grid.minor = element_blank()
  )

```

```{R sampling heatmap, fig.width=10, fig.height= max(6, length(unique(heat_long$Monitoring.Location.ID)) * 0.2)}
# Create a heatmap of sampling locations over time
# drop rows with missing dates or IDs
sampling_events <- sampling_events %>%
  filter(!is.na(`Activity.Start.Date.Time`), !is.na(Monitoring.Location.ID))
# if sampling_events is empty, skip this plot
if (nrow(sampling_events) > 0) {
  ggplot(sampling_events, 
          aes(x = `Activity.Start.Date.Time`, 
              y = Monitoring.Location.ID)) +
      geom_point(color = "steelblue", alpha = 0.7) +
      labs(
        title = "Sampling Locations Over Time",
        x = "Date",
        y = "Monitoring Location ID"
      ) +
      theme_minimal() +
      theme(
        axis.text.x = element_text(angle = 45, hjust = 1),
        panel.grid.minor = element_blank()
      )
} else {
  print("No sampling events with valid dates & IDs")
}
```

```{R print start + end dates}
date_range <- range(df$`Activity.Start.Date.Time`, na.rm = TRUE)
  cat("Earliest sampling date: ", format(date_range[1], "%Y-%m-%d %H:%M:%S"), "\n")
  cat("Latest   sampling date: ", format(date_range[2], "%Y-%m-%d %H:%M:%S"), "\n")
```

-----------

[Download Data For This Provider](`{r} glue("../data/WIN/_WIN_WAVES_OTIS_{params$org_id}.txt")`)
