---
title: "Salinity Report"
format: html
params:
  analyte: "Salinity"  # must be "Salinity" before rendering
---

```{R, get data across all programs, filter for analyte}
#| code-summary: get data across all programs, filter for analyte
#| message: false
#| warning: false
library('here')
library('dplyr')
source(here("R/getAllData.R"))
full_df <- getAllData()
df <- filter(full_df, DEP.Analyte.Name == params$analyte)
```

```{R, create .csv of analyte data}
#| code-summary: create .csv of analyte data
# save df to csv
# reduce to only cols we need & save to csv
df %>%
  mutate(
    source = program,
    site = Monitoring.Location.ID,
    datetime = Activity.Start.Date.Time,
    analyte = DEP.Analyte.Name,
    value = DEP.Result.Value.Number,
    units = DEP.Result.Unit,
    latitude = Org.Decimal.Latitude,
    longitude = Org.Decimal.Longitude,
    sample_depth = Activity.Depth,
    .keep = "none"
) %>%
  write.csv(here("data", "exports", "unified-wq-db-samples", paste0(params$analyte, ".csv")))
```

Download data for this analyte [here](data/exports/`r params$analyte`.csv)

### Histogram of `DEP.Result.Value.Number`:

```{R, display histogram of values}
#| code-summary: display histogram of values

library(ggplot2)
ggplot(df, aes(x = DEP.Result.Value.Number)) +
  geom_histogram(bins = 30, fill = "blue", color = "black") +
  labs(title = "Histogram of Values", x = "Value", y = "Count")
```


### Station Statistics:
```{R, create station statistics dataframe}
#| code-summary: create station statistics dataframe

source(here("R/seasonalMannKendall.R"))
library(lubridate)  # for mdy_hms()
library(pander)  # for display

# create table of samples for each station
samples_df <- df %>%
  select(
    program, 
    Monitoring.Location.ID, 
    Activity.Start.Date.Time,
    analyte = DEP.Analyte.Name,
    DEP.Result.Value.Number, 
    DEP.Result.Unit,
    latitude = Org.Decimal.Latitude,
    longitude = Org.Decimal.Longitude,
    sample_depth = Activity.Depth
    ) %>%
  # drop any with empty Monitoring.Location.ID
  filter(!is.na(Monitoring.Location.ID)) %>%
  # drop any with empty Activity.Start.Date.Time
  filter(!is.na(Activity.Start.Date.Time)) %>%
  # parse the "MM/DD/YYYY HH:MM:SS" strings into POSIXct
  mutate(Activity.Start.Date.Time = mdy_hms(
          Activity.Start.Date.Time,
          tz = "UTC")) %>%
  distinct()


# add statistics for each station
sample_stats_df <- samples_df %>%
  group_by(program, Monitoring.Location.ID) %>%
  reframe(
    {
      tmp <- seasonalMannKendallVectorized(
        Activity.Start.Date.Time,
        DEP.Result.Value.Number
      )
    },
    n_values = n(),
    mean = mean(DEP.Result.Value.Number),
    min = min(DEP.Result.Value.Number),
    max = max(DEP.Result.Value.Number),
    coefficient.of.variation = sd(DEP.Result.Value.Number) / mean(DEP.Result.Value.Number)
  ) %>%
  # create column significant_trend
  mutate(
    significant_trend = ifelse(z > 1.96, slope, NA_real_)
  )



# print(head(sample_stats_df))
# # display sample_stats_df with pander
# pander(sample_stats_df)
```

```{R, save stats to csv}
#| code-summary: save stats to csv
sample_stats_df %>%
  write.csv(here(
    "data", "exports", "seasonal-mann-kendall-stats", paste0(params$analyte, ".csv")))
```

Download data for this analyte's statistics [here](data/exports/seasonal-mann-kendall-stats/`r params$analyte`.csv)


```{R, display with gt}
#| code-summary: display with gt

library(gt)
library(scales)
library(tidyselect)  # for all_of()
library(RColorBrewer) # for brewer.pal()

# ── color_column() ─────────────────────────────────────────────────────────────
# gt_tbl   : a gt object that you’ve already created (e.g. `sample_stats_df %>% gt()`)
# df       : the original data.frame (must contain the column you want to color)
# column   : a string, e.g. "slope" or "n_values"
# palette  : a character vector of colours to feed to col_numeric()
#
color_column <- function(gt_tbl, df, column, 
                         palette = c("red", "orange", "yellow", "green", "blue", "violet"),
                         domain = NULL) {
  # 1) Pull out that column’s numeric values
  vals <- df[[column]]
  if (!is.numeric(vals)) {
    stop(sprintf("`%s` is not numeric; data_color() requires a numeric column.", column))
  }
  
  # 2) Compute its min and max (ignoring NA)
  min_val <- min(vals, na.rm = TRUE)
  max_val <- max(vals, na.rm = TRUE)
  if (is.null(domain)) {
    domain <- c(min_val, max_val)
  }
  
  # 3) Call data_color() on the gt table for that single column
  gt_tbl %>%
    data_color(
      columns = all_of(column),
      colors  = col_numeric(
        palette = palette,
        domain  = domain
      )
    )
}
library(dplyr)
library(gt)

# 1) First build your gt table as usual:
gt_tbl <- sample_stats_df %>% 
  gt()

# slope blue (-) to red (+) (0 centered)
tryCatch({
  min_slope <- min(sample_stats_df$slope,  na.rm = TRUE)
  max_slope <- max(sample_stats_df$slope,  na.rm = TRUE)
  max_abs_slope <- max(abs(min_slope), abs(max_slope))
  gt_tbl <- color_column(
    gt_tbl, 
    df     = sample_stats_df, 
    column = "slope",
    palette = rev(brewer.pal(11, "RdBu")),
    domain  = c(-max_abs_slope, max_abs_slope)
  )
}, error = function(e) {
  print("Error in slope color column")
  print(e)
})

# tau 
tryCatch({
  # min
  gt_tbl <- color_column(
    gt_tbl, 
    df      = sample_stats_df, 
    column  = "tau", 
    palette = scales::brewer_pal(palette = "Blues")(9)
  )
}, error = function(e) {
  print("Error in tau color column")
  print(e)
})

tryCatch({
  # chi_square
  gt_tbl <- color_column(
    gt_tbl, 
    df      = sample_stats_df, 
    column  = "chi_square", 
    palette = scales::brewer_pal(palette = "Blues")(9)
  )
}, error = function(e) {
  print("Error in chi_square color column")
  print(e)
})


tryCatch({
  # Z
  gt_tbl <- color_column(
    gt_tbl, 
    df      = sample_stats_df, 
    column  = "z", 
    palette = scales::brewer_pal(palette = "Blues")(9)
  )
}, error = function(e) {
  print("Error in z color column")
  print(e)
})

tryCatch({
  # mean values blue to red (0 centered)
  min_mean <- min(sample_stats_df$mean,  na.rm = TRUE)
  max_mean <- max(sample_stats_df$mean,  na.rm = TRUE)
  max_abs_mean <- max(abs(min_mean), abs(max_mean))
  gt_tbl <- color_column(
    gt_tbl, 
    df     = sample_stats_df, 
    column = "mean",
    palette = rev(brewer.pal(11, "RdBu")),
    domain  = c(-max_abs_mean, max_abs_mean)
  )
}, error = function(e) {
  print("Error in mean color column")
  print(e)
})

tryCatch({
  # n values white to green
  gt_tbl <- color_column(
    gt_tbl, 
    df      = sample_stats_df, 
    column  = "n_values", 
    palette = scales::brewer_pal(palette = "Greens")(9)
  )
}, error = function(e) {
  print("Error in n_values color column")
  print(e)
})

tryCatch({
  # min
  gt_tbl <- color_column(
    gt_tbl, 
    df      = sample_stats_df, 
    column  = "min", 
    palette = scales::brewer_pal(palette = "Blues")(9)
  )
}, error = function(e) {
  print("Error in min color column")
  print(e)
})

tryCatch({
  # max
  gt_tbl <- color_column(
    gt_tbl, 
    df      = sample_stats_df, 
    column  = "max", 
    palette = scales::brewer_pal(palette = "Blues")(9)
  )
}, error = function(e) {
  print("Error in max color column")
  print(e)
})

tryCatch({
  # coefficient.of.variation
  gt_tbl <- color_column(
    gt_tbl, 
    df      = sample_stats_df, 
    column  = "coefficient.of.variation", 
    palette = scales::brewer_pal(palette = "Blues")(9)
  )
}, error = function(e) {
  print("Error in coefficient.of.variation color column")
  print(e)
})

# 4) Render/display:
gt_tbl
```

### Reporting Programs:
```{R, display reporting programs}
#| code-summary: display reporting programs

library(ggplot2)
ggplot(df, aes(x = program)) +
  geom_bar() +
  labs(title = "Reporting Programs", x = "Program", y = "Count")
```