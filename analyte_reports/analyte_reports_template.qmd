---
title: "Salinity Report"
author: "Tylar Murray"
format: html
params:
  analyte: "Salinity"  # must be Salinity before rendering
---

Analyte report.

```{R, get data across all programs}
#| code-summary: get data across all programs
#| message: false
#| warning: false
library('here')
source(here("R/getAllData.R"))
df <- getAllData()
```

```{R, create station statistics dataframe}
source(here("R/seasonalMannKendall.R"))
library(lubridate)  # for mdy_hms()
library(pander)  # for display

# create table of samples for each station
samples_df <- df %>%
  select(
    program, Monitoring.Location.ID, Activity.Start.Date.Time,
    DEP.Result.Value.Number, DEP.Result.Unit
    ) %>%
  # drop any with empty Monitoring.Location.ID
  filter(!is.na(Monitoring.Location.ID)) %>%
  # drop any with empty Activity.Start.Date.Time
  filter(!is.na(Activity.Start.Date.Time)) %>%
  distinct() %>%
  # parse the "MM/DD/YYYY HH:MM:SS" strings into POSIXct
  mutate(
    Activity.Start.Date.Time = mdy_hms(
      Activity.Start.Date.Time,
      tz = "UTC"
    )
  )


# add statistics for each station
sample_stats_df <- samples_df %>%
  group_by(program, Monitoring.Location.ID) %>%
  reframe(
    n_values = n(),
    trend = seasonalMannKendallVectorized(
      Activity.Start.Date.Time,
      DEP.Result.Value.Number
    ),
    mean = mean(DEP.Result.Value.Number),
    min = min(DEP.Result.Value.Number),
    max = max(DEP.Result.Value.Number),
    coefficient.of.variation = sd(DEP.Result.Value.Number) / mean(DEP.Result.Value.Number)
  )

# print(head(sample_stats_df))
# # display sample_stats_df with pander
# pander(sample_stats_df)
```



```{r, display with gt}

library(gt)
library(scales)
library(tidyselect)  # for all_of()
library(RColorBrewer) # for brewer.pal()

# ── color_column() ─────────────────────────────────────────────────────────────
# gt_tbl   : a gt object that you’ve already created (e.g. `sample_stats_df %>% gt()`)
# df       : the original data.frame (must contain the column you want to color)
# column   : a string, e.g. "trend" or "n_values"
# palette  : a character vector of colours to feed to col_numeric()
#
color_column <- function(gt_tbl, df, column, 
                         palette = c("red", "orange", "yellow", "green", "blue", "violet"),
                         domain = NULL) {
  # 1) Pull out that column’s numeric values
  vals <- df[[column]]
  if (!is.numeric(vals)) {
    stop(sprintf("`%s` is not numeric; data_color() requires a numeric column.", column))
  }
  
  # 2) Compute its min and max (ignoring NA)
  min_val <- min(vals, na.rm = TRUE)
  max_val <- max(vals, na.rm = TRUE)
  if (is.null(domain)) {
    domain <- c(min_val, max_val)
  }
  
  # 3) Call data_color() on the gt table for that single column
  gt_tbl %>%
    data_color(
      columns = all_of(column),
      colors  = col_numeric(
        palette = palette,
        domain  = domain
      )
    )
}
library(dplyr)
library(gt)

# Suppose `sample_stats_df` is your data.frame:
# sample_stats_df <- data.frame(
#   trend      = c(-1.2, 0.5, 2.3, -0.8, 0, NA),
#   n_values = c(10, 25, 5,  17, 30, 8),
#   other_var  = runif(6)
# )

# 1) First build your gt table as usual:
gt_tbl <- sample_stats_df %>% 
  gt()

# trend blue (-) to red (+) (0 centered)
min_trend <- min(sample_stats_df$trend,  na.rm = TRUE)
max_trend <- max(sample_stats_df$trend,  na.rm = TRUE)
max_abs_trend <- max(abs(min_trend), abs(max_trend))
gt_tbl <- color_column(
  gt_tbl, 
  df     = sample_stats_df, 
  column = "trend",
  palette = rev(brewer.pal(11, "RdBu")),
  domain  = c(-max_abs_trend, max_abs_trend)
)

# mean values blue to red (0 centered)
min_mean <- min(sample_stats_df$mean,  na.rm = TRUE)
max_mean <- max(sample_stats_df$mean,  na.rm = TRUE)
max_abs_mean <- max(abs(min_mean), abs(max_mean))
gt_tbl <- color_column(
  gt_tbl, 
  df     = sample_stats_df, 
  column = "mean",
  palette = rev(brewer.pal(11, "RdBu")),
  domain  = c(-max_abs_mean, max_abs_mean)
)
# n values white to green
gt_tbl <- color_column(
  gt_tbl, 
  df      = sample_stats_df, 
  column  = "n_values", 
  palette = scales::brewer_pal(palette = "Greens")(9)
)

# min
gt_tbl <- color_column(
  gt_tbl, 
  df      = sample_stats_df, 
  column  = "min", 
  palette = scales::brewer_pal(palette = "Blues")(9)
)
# max
gt_tbl <- color_column(
  gt_tbl, 
  df      = sample_stats_df, 
  column  = "min", 
  palette = scales::brewer_pal(palette = "Blues")(9)
)

# coefficient.of.variation
gt_tbl <- color_column(
  gt_tbl, 
  df      = sample_stats_df, 
  column  = "coefficient.of.variation", 
  palette = scales::brewer_pal(palette = "Blues")(9)
)
# 4) Render/display:
gt_tbl
```

