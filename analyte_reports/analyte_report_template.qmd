---
title: "Ammonia (N) Report"
author: "Tylar Murray"
format: html
params:
  analyte: "Ammonia (N)"  # must be Ammonia (N) before rendering
---

```{R, get data across all programs}
#| code-summary: get data across all programs
#| message: false
#| warning: false
library('here')
source(here("R/getAllData.R"))
df <- getAllData()
```

```{R, create table of statistics for selected analyte}
#| code-summary: create table of statistics for selected analyte
#| message: true
#| warning: true
source(here("R/seasonalMannKendall.R"))
library(dplyr)
library(lubridate)

# Print which analyte we're analyzing
cat(paste0("Analyzing data for analyte: ", params$analyte, "\n"))

# Filter data to only include the selected analyte
analyte_df <- df %>%
  filter(DEP.Analyte.Name == params$analyte)

# Create a unique identifier by combining program and station ID
analyte_df$id <- paste0(analyte_df$program, "_", analyte_df$Monitoring.Location.ID)

# Count how many stations have data for this analyte
station_count <- length(unique(analyte_df$id))
cat(paste0("Found ", station_count, " stations with data for ", params$analyte, "\n"))

# Create a clean analyte data table
mean_table <- analyte_df %>%
  # Select only the relevant columns
  select(id, program, Monitoring.Location.ID, DEP.Result.Value.Number, DEP.Result.Unit) %>%
  # Remove rows with missing result values
  filter(!is.na(DEP.Result.Value.Number)) %>%
  # Convert to numeric to ensure proper calculation
  mutate(DEP.Result.Value.Number = as.numeric(DEP.Result.Value.Number)) %>%
  # Group by location
  group_by(id, program, Monitoring.Location.ID, DEP.Result.Unit) %>%
  # Calculate mean for each group
  summarise(
    n_values = n(),
    mean_value = round(mean(DEP.Result.Value.Number, na.rm = TRUE), 2),
    .groups = "drop"
  ) %>%
  # Create a formatted string with the mean and unit
  mutate(formatted_result = paste0(mean_value, " ", DEP.Result.Unit))

# Display summary statistics
cat(paste0("Total observations for ", params$analyte, ": ", sum(mean_table$n_values), "\n"))

# Run Seasonal Mann-Kendall trend analysis
cat("\n### Performing Seasonal Mann-Kendall Trend Analysis\n")
mkr <- seasonalMannKendall(analyte_df)
    
# Convert the result matrix to a dataframe
mkr_df <- as.data.frame(mkr, stringsAsFactors = FALSE)

# Join the trend results with the mean table
# First, create a mapping from id to Monitoring.Location.ID
id_mapping <- analyte_df %>%
  select(id, Monitoring.Location.ID) %>%
  distinct()

# Join trend results with the id mapping
mkr_with_ids <- mkr_df %>%
  left_join(id_mapping, by = "Monitoring.Location.ID")

# Now join with the mean table
mean_table_with_trends <- mean_table %>%
  left_join(mkr_with_ids, by = c("id", "Monitoring.Location.ID"))

# Replace NA trend slopes with "No trend" for display
mean_table_with_trends <- mean_table_with_trends %>%
  mutate(Trend.Slope = ifelse(is.na(Trend.Slope), NA, round(Trend.Slope, 4)),
         Trend.Direction = case_when(
           is.na(Trend.Slope) ~ "Insufficient Data",
           Trend.Slope > 0 ~ "Increasing",
           Trend.Slope < 0 ~ "Decreasing",
           TRUE ~ "No Change"
         ))

# Convert column types
mean_table_with_trends$Monitoring.Location.ID <- as.character(mean_table_with_trends$Monitoring.Location.ID)
mean_table_with_trends$Trend.Slope <- as.numeric(mean_table_with_trends$Trend.Slope)
  
# Join the trend results with the mean table
# First, create a mapping from id to Monitoring.Location.ID
id_mapping <- analyte_df %>%
  select(id, Monitoring.Location.ID) %>%
  distinct()
  
# Join trend results with the id mapping
mkr_with_ids <- mkr_df %>%
  left_join(id_mapping, by = "Monitoring.Location.ID")
  
# Now join with the mean table
mean_table_with_trends <- mean_table %>%
  left_join(mkr_with_ids, by = c("id", "Monitoring.Location.ID"))
  

# Sort by mean value (descending) to see highest concentrations first
sorted_mean_table <- mean_table_with_trends %>%
  arrange(desc(mean_value))

# Display the table with program name for context
result_table <- sorted_mean_table %>%
  select(program, Monitoring.Location.ID, n_values, mean_value, DEP.Result.Unit, Trend.Slope, Trend.Direction)

# Add a title to the table
cat(paste0("\n## Mean ", params$analyte, " Concentrations and Trends by Station\n"))
cat("*Note: Trend slope represents the estimated change per month from the Seasonal Mann-Kendall test*\n")

# Display the table using pander for better formatting
library(pander)
pander(result_table, digits = c(0, 0, 0, 2, 0, 4, 0))

```

```{R, create histogram of means}

# Create a simple histogram of the values
if (nrow(mean_table) > 0) {
  cat(paste0("\n## Distribution of ", params$analyte, " Concentrations\n"))
  hist(mean_table$mean_value, 
       main = paste0("Histogram of Mean ", params$analyte, " Values"),
       xlab = paste0(params$analyte, " (", unique(mean_table$DEP.Result.Unit)[1], ")"),
       col = "lightblue",
       breaks = min(20, max(5, nrow(mean_table) %/% 5)))
}
```