[
  {
    "objectID": "provider_reports/provider_reports_template.html",
    "href": "provider_reports/provider_reports_template.html",
    "title": "BROWARD Report",
    "section": "",
    "text": "WQ Provider Report\n\n\nCode\nlibrarian::shelf(\n  dplyr,\n  glue,\n  here,\n  tidyr\n)\n\n\n\n\nread in the WIN txt pipe-delimited file\nsource(here(\"R/getData.R\"))\ndf &lt;- getData(params$org_id)\n\n\nSkipped lines:\nRequested report - WIN WAVES\nORGANIZATION ID = 21FLBROW\nPROJECT ID - PROJECT NAME = PROJ-001 - Surfacewater Quality Monitoring Network\nCOUNTY = BROWARD, FLORIDA\nDEP ANALYTE GROUP = General Physical-Chemical | Biological | Nutrients\nDEP ANALYTE NAME - UNIT = Ammonia (N) - mg/L | Nitrogen- Total Kjeldahl - mg/L | Nitrate-Nitrite (N) - mg/L | Orthophosphate (P) - mg/L | pH - SU | Phosphorus- Total - mg/L | Salinity - PSU | Turbidity - NTU | Nitrogen- Total - mg/L | Dissolved Oxygen - mg/L | Temperature, Water - deg C | Chlorophyll a- corrected - ug/L | Ammonia- Un-ionized (NH3) - mg/L\nReport Run on APRIL 28, 2025\nThe data you are accessing are from the WIN Warehouse.  The WIN Warehouse is refreshed on a weekly basis with new data that are submitted to WIN.  The refresh process occurs on the weekend; data uploaded to WIN through each Friday are available in the WIN Warehouse by the following Monday.  WIN replaces Florida STORET as an active data repository.  Florida STORET data are accessible through STORET Public Access (SPA).\nThe following data met your selection criteria\n\n\nConverted 0 latitude values from DMS to decimal format.\nConverted 0 longitude values from DMS to decimal format.\n\n\nread in the WIN txt pipe-delimited file\n# Ensure the result value column is numeric (coerce if needed)\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# 1. Ensure the result values are numeric\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n# 2. Build a wide “presence” table per Location × Analyte\npresence_table &lt;- df %&gt;%\n  group_by(Monitoring.Location.ID, DEP.Analyte.Name) %&gt;%\n  summarise(\n    # 1 if any non-NA exists, else 0\n    presence = ifelse(any(!is.na(DEP.Result.Value.Number)), 1L, 0L),\n    .groups = \"drop\"\n  ) %&gt;%\n  pivot_wider(\n    names_from  = DEP.Analyte.Name,\n    values_from = presence,\n    values_fill = list(presence = 0L)\n  )\n\n# 3. Pivot back to long for ggplot\nheat_long &lt;- presence_table %&gt;%\n  pivot_longer(\n    cols      = -Monitoring.Location.ID,\n    names_to  = \"DEP.Analyte.Name\",\n    values_to = \"presence\"\n  )\n\n\n\n\nCode\n# 4. Draw the heatmap with a white→steelblue gradient\nggplot(heat_long,\n       aes(x = DEP.Analyte.Name,\n           y = Monitoring.Location.ID,\n           fill = presence)) +\n  geom_tile(color = \"grey90\") +\n  scale_fill_gradient(\n    low    = \"white\",\n    high   = \"steelblue\",\n    limits = c(0, 1),\n    breaks = c(0, 1),\n    labels = c(\"0 (none)\", \"1 (some)\")\n  ) +\n  labs(\n    x    = \"DEP Analyte Name\",\n    y    = \"Monitoring Location ID\",\n    fill = \"Presence\\n(0/1)\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    axis.text.x  = element_text(angle = 45, hjust = 1),\n    panel.grid   = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\ncreate map with unique points (no clustering)\nlibrary(leaflet)\nlibrary(dplyr)\n\n# 1. Filter out rows & keep only one per unique lat/lon\ndf_unique_locs &lt;- df %&gt;%\n  filter(!is.na(Org.Decimal.Latitude), !is.na(Org.Decimal.Longitude)) %&gt;%\n  distinct(Org.Decimal.Latitude, Org.Decimal.Longitude, .keep_all = TRUE)\n\n# 2. Plot all unique points (no clustering)\nleaflet(df_unique_locs) %&gt;%\n  addProviderTiles(providers$OpenStreetMap) %&gt;%\n  addCircleMarkers(\n    lng         = ~Org.Decimal.Longitude,\n    lat         = ~Org.Decimal.Latitude,\n    radius      = 4,\n    color       = \"blue\",\n    fillOpacity = 0.5,\n    popup       = ~paste0(\n      \"Monitoring Location: \", Monitoring.Location.ID\n    )\n    # clusterOptions removed to show every point at all zoom levels\n  )\n\n\n\n\n\n\n\n\nvisualize distribution of points through time\nlibrary(ggplot2)\nlibrary(lubridate)\n\n# Convert Activity.Start.Date.Time to proper datetime if it isn't already\ndf$`Activity.Start.Date.Time` &lt;- as.POSIXct(as.character(df$`Activity.Start.Date.Time`), format = \"%m/%d/%Y %H:%M:%S\")\n\n\n# Create a dataframe with unique sampling events\nsampling_events &lt;- df %&gt;%\n  distinct(`Activity.Start.Date.Time`, Monitoring.Location.ID) %&gt;%\n  arrange(`Activity.Start.Date.Time`)\n\n# Create the time distribution plot\nggplot(sampling_events, aes(x = `Activity.Start.Date.Time`)) +\n  geom_histogram(bins = 30, fill = \"steelblue\", color = \"white\", alpha = 0.7) +\n  labs(\n    title = \"Distribution of Sampling Events Over Time\",\n    x = \"Date\",\n    y = \"Number of Sampling Events\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\nvisualize distribution of points through time\n# Create a heatmap of sampling locations over time\nggplot(sampling_events, \n       aes(x = `Activity.Start.Date.Time`, \n           y = Monitoring.Location.ID)) +\n  geom_point(color = \"steelblue\", alpha = 0.7) +\n  labs(\n    title = \"Sampling Locations Over Time\",\n    x = \"Date\",\n    y = \"Monitoring Location ID\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\nDownload Data For This Provider"
  },
  {
    "objectID": "provider_reports/provider_reports/PALMBEACH.html",
    "href": "provider_reports/provider_reports/PALMBEACH.html",
    "title": "PALMBEACH Report",
    "section": "",
    "text": "WQ Provider Report\n\n\nCode\nlibrarian::shelf(\n  dplyr,\n  glue,\n  here,\n  tidyr\n)\n\n\n\n\nread in the WIN txt pipe-delimited file\nsource(here(\"R/getData.R\"))\ndf &lt;- getData(params$org_id)\n\n\nSkipped lines:\nRequested report - WIN WAVES\nORGANIZATION ID = 21FLPBCH\nPROJECT ID - PROJECT NAME = ERMWQ - PBC ERM Ambient Water Quality Monitoring\nDEP ANALYTE GROUP = General Physical-Chemical | Biological | Nutrients\nDEP ANALYTE NAME - UNIT = Ammonia (N) - mg/L | Nitrogen- Total Kjeldahl - mg/L | Nitrate (N) - mg/L | Nitrate-Nitrite (N) - mg/L | Nitrite (N) - mg/L | Orthophosphate (P) - mg/L | pH - SU | Phosphorus- Total - mg/L | Salinity - PSU | Turbidity - NTU | Chlorophyll a, free of pheophytin - ug/L | Nitrogen- Total - mg/L | Silica (SiO2) - mg/L | Dissolved Oxygen - mg/L | Temperature, Water - deg C | Chlorophyll a- uncorrected - ug/L | Chlorophyll a- corrected - ug/L\nReport Run on APRIL 30, 2025\nThe data you are accessing are from the WIN Warehouse.  The WIN Warehouse is refreshed on a weekly basis with new data that are submitted to WIN.  The refresh process occurs on the weekend; data uploaded to WIN through each Friday are available in the WIN Warehouse by the following Monday.  WIN replaces Florida STORET as an active data repository.  Florida STORET data are accessible through STORET Public Access (SPA).\nThe following data met your selection criteria\n\n\nConverted 10563 latitude values from DMS to decimal format.\nConverted 10563 longitude values from DMS to decimal format.\n\n\nread in the WIN txt pipe-delimited file\n# Ensure the result value column is numeric (coerce if needed)\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# 1. Ensure the result values are numeric\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n# 2. Build a wide “presence” table per Location × Analyte\npresence_table &lt;- df %&gt;%\n  group_by(Monitoring.Location.ID, DEP.Analyte.Name) %&gt;%\n  summarise(\n    # 1 if any non-NA exists, else 0\n    presence = ifelse(any(!is.na(DEP.Result.Value.Number)), 1L, 0L),\n    .groups = \"drop\"\n  ) %&gt;%\n  pivot_wider(\n    names_from  = DEP.Analyte.Name,\n    values_from = presence,\n    values_fill = list(presence = 0L)\n  )\n\n# 3. Pivot back to long for ggplot\nheat_long &lt;- presence_table %&gt;%\n  pivot_longer(\n    cols      = -Monitoring.Location.ID,\n    names_to  = \"DEP.Analyte.Name\",\n    values_to = \"presence\"\n  )\n\n\n\n\nCode\n# 4. Draw the heatmap with a white→steelblue gradient\nggplot(heat_long,\n       aes(x = DEP.Analyte.Name,\n           y = Monitoring.Location.ID,\n           fill = presence)) +\n  geom_tile(color = \"grey90\") +\n  scale_fill_gradient(\n    low    = \"white\",\n    high   = \"steelblue\",\n    limits = c(0, 1),\n    breaks = c(0, 1),\n    labels = c(\"0 (none)\", \"1 (some)\")\n  ) +\n  labs(\n    x    = \"DEP Analyte Name\",\n    y    = \"Monitoring Location ID\",\n    fill = \"Presence\\n(0/1)\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    axis.text.x  = element_text(angle = 45, hjust = 1),\n    panel.grid   = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\ncreate map with unique points (no clustering)\nlibrary(leaflet)\nlibrary(dplyr)\n\n# 1. Filter out rows & keep only one per unique lat/lon\ndf_unique_locs &lt;- df %&gt;%\n  filter(!is.na(Org.Decimal.Latitude), !is.na(Org.Decimal.Longitude)) %&gt;%\n  distinct(Org.Decimal.Latitude, Org.Decimal.Longitude, .keep_all = TRUE)\n\n# 2. Plot all unique points (no clustering)\nleaflet(df_unique_locs) %&gt;%\n  addProviderTiles(providers$OpenStreetMap) %&gt;%\n  addCircleMarkers(\n    lng         = ~Org.Decimal.Longitude,\n    lat         = ~Org.Decimal.Latitude,\n    radius      = 4,\n    color       = \"blue\",\n    fillOpacity = 0.5,\n    popup       = ~paste0(\n      \"Monitoring Location: \", Monitoring.Location.ID\n    )\n    # clusterOptions removed to show every point at all zoom levels\n  )\n\n\n\n\n\n\n\n\nvisualize distribution of points through time\nlibrary(ggplot2)\nlibrary(lubridate)\n\n# Convert Activity.Start.Date.Time to proper datetime if it isn't already\ndf$`Activity.Start.Date.Time` &lt;- as.POSIXct(as.character(df$`Activity.Start.Date.Time`), format = \"%m/%d/%Y %H:%M:%S\")\n\n\n# Create a dataframe with unique sampling events\nsampling_events &lt;- df %&gt;%\n  distinct(`Activity.Start.Date.Time`, Monitoring.Location.ID) %&gt;%\n  arrange(`Activity.Start.Date.Time`)\n\n# Create the time distribution plot\nggplot(sampling_events, aes(x = `Activity.Start.Date.Time`)) +\n  geom_histogram(bins = 30, fill = \"steelblue\", color = \"white\", alpha = 0.7) +\n  labs(\n    title = \"Distribution of Sampling Events Over Time\",\n    x = \"Date\",\n    y = \"Number of Sampling Events\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\nvisualize distribution of points through time\n# Create a heatmap of sampling locations over time\nggplot(sampling_events, \n       aes(x = `Activity.Start.Date.Time`, \n           y = Monitoring.Location.ID)) +\n  geom_point(color = \"steelblue\", alpha = 0.7) +\n  labs(\n    title = \"Sampling Locations Over Time\",\n    x = \"Date\",\n    y = \"Monitoring Location ID\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\nDownload Data For This Provider"
  },
  {
    "objectID": "provider_reports/provider_reports/DERM_BBWQ.html",
    "href": "provider_reports/provider_reports/DERM_BBWQ.html",
    "title": "DERM_BBWQ Report",
    "section": "",
    "text": "WQ Provider Report\n\n\nCode\nlibrarian::shelf(\n  dplyr,\n  glue,\n  here,\n  tidyr\n)\n\n\n\n\nread in the WIN txt pipe-delimited file\nsource(here(\"R/getData.R\"))\ndf &lt;- getData(params$org_id)\n\n\nSkipped lines:\nRequested report - WIN WAVES\nORGANIZATION ID = 21FLDADE\nPROJECT ID - PROJECT NAME = BBWQ - Biscayne Bay Water Quality | BBWQ - Biscayne Bay Water Quality Monitoring Program\nDEP ANALYTE GROUP = General Physical-Chemical | Biological | Nutrients\nDEP ANALYTE NAME - UNIT = Ammonia (N) - mg/L | Nitrogen- Total Kjeldahl - mg/L | Nitrate-Nitrite (N) - mg/L | Orthophosphate (P) - mg/L | pH - SU | Phosphorus- Total - mg/L | Salinity - PSU | Turbidity - NTU | Chlorophyll a, free of pheophytin - ug/L | Dissolved Oxygen - mg/L | Temperature, Water - deg C | Chlorophyll a- uncorrected - ug/L | Chlorophyll a- corrected - ug/L | Ammonia- Un-ionized (NH3) - mg/L\nReport Run on APRIL 30, 2025\nThe data you are accessing are from the WIN Warehouse.  The WIN Warehouse is refreshed on a weekly basis with new data that are submitted to WIN.  The refresh process occurs on the weekend; data uploaded to WIN through each Friday are available in the WIN Warehouse by the following Monday.  WIN replaces Florida STORET as an active data repository.  Florida STORET data are accessible through STORET Public Access (SPA).\nThe following data met your selection criteria\n\n\nConverted 0 latitude values from DMS to decimal format.\nConverted 0 longitude values from DMS to decimal format.\n\n\nread in the WIN txt pipe-delimited file\n# Ensure the result value column is numeric (coerce if needed)\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# 1. Ensure the result values are numeric\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n# 2. Build a wide “presence” table per Location × Analyte\npresence_table &lt;- df %&gt;%\n  group_by(Monitoring.Location.ID, DEP.Analyte.Name) %&gt;%\n  summarise(\n    # 1 if any non-NA exists, else 0\n    presence = ifelse(any(!is.na(DEP.Result.Value.Number)), 1L, 0L),\n    .groups = \"drop\"\n  ) %&gt;%\n  pivot_wider(\n    names_from  = DEP.Analyte.Name,\n    values_from = presence,\n    values_fill = list(presence = 0L)\n  )\n\n# 3. Pivot back to long for ggplot\nheat_long &lt;- presence_table %&gt;%\n  pivot_longer(\n    cols      = -Monitoring.Location.ID,\n    names_to  = \"DEP.Analyte.Name\",\n    values_to = \"presence\"\n  )\n\n\n\n\nCode\n# 4. Draw the heatmap with a white→steelblue gradient\nggplot(heat_long,\n       aes(x = DEP.Analyte.Name,\n           y = Monitoring.Location.ID,\n           fill = presence)) +\n  geom_tile(color = \"grey90\") +\n  scale_fill_gradient(\n    low    = \"white\",\n    high   = \"steelblue\",\n    limits = c(0, 1),\n    breaks = c(0, 1),\n    labels = c(\"0 (none)\", \"1 (some)\")\n  ) +\n  labs(\n    x    = \"DEP Analyte Name\",\n    y    = \"Monitoring Location ID\",\n    fill = \"Presence\\n(0/1)\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    axis.text.x  = element_text(angle = 45, hjust = 1),\n    panel.grid   = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\ncreate map with unique points (no clustering)\nlibrary(leaflet)\nlibrary(dplyr)\n\n# 1. Filter out rows & keep only one per unique lat/lon\ndf_unique_locs &lt;- df %&gt;%\n  filter(!is.na(Org.Decimal.Latitude), !is.na(Org.Decimal.Longitude)) %&gt;%\n  distinct(Org.Decimal.Latitude, Org.Decimal.Longitude, .keep_all = TRUE)\n\n# 2. Plot all unique points (no clustering)\nleaflet(df_unique_locs) %&gt;%\n  addProviderTiles(providers$OpenStreetMap) %&gt;%\n  addCircleMarkers(\n    lng         = ~Org.Decimal.Longitude,\n    lat         = ~Org.Decimal.Latitude,\n    radius      = 4,\n    color       = \"blue\",\n    fillOpacity = 0.5,\n    popup       = ~paste0(\n      \"Monitoring Location: \", Monitoring.Location.ID\n    )\n    # clusterOptions removed to show every point at all zoom levels\n  )\n\n\n\n\n\n\n\n\nvisualize distribution of points through time\nlibrary(ggplot2)\nlibrary(lubridate)\n\n# Convert Activity.Start.Date.Time to proper datetime if it isn't already\ndf$`Activity.Start.Date.Time` &lt;- as.POSIXct(as.character(df$`Activity.Start.Date.Time`), format = \"%m/%d/%Y %H:%M:%S\")\n\n\n# Create a dataframe with unique sampling events\nsampling_events &lt;- df %&gt;%\n  distinct(`Activity.Start.Date.Time`, Monitoring.Location.ID) %&gt;%\n  arrange(`Activity.Start.Date.Time`)\n\n# Create the time distribution plot\nggplot(sampling_events, aes(x = `Activity.Start.Date.Time`)) +\n  geom_histogram(bins = 30, fill = \"steelblue\", color = \"white\", alpha = 0.7) +\n  labs(\n    title = \"Distribution of Sampling Events Over Time\",\n    x = \"Date\",\n    y = \"Number of Sampling Events\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\nvisualize distribution of points through time\n# Create a heatmap of sampling locations over time\nggplot(sampling_events, \n       aes(x = `Activity.Start.Date.Time`, \n           y = Monitoring.Location.ID)) +\n  geom_point(color = \"steelblue\", alpha = 0.7) +\n  labs(\n    title = \"Sampling Locations Over Time\",\n    x = \"Date\",\n    y = \"Monitoring Location ID\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\nDownload Data For This Provider"
  },
  {
    "objectID": "provider_reports/provider_reports/BBAP.html",
    "href": "provider_reports/provider_reports/BBAP.html",
    "title": "BBAP Report",
    "section": "",
    "text": "WQ Provider Report\n\n\nCode\nlibrarian::shelf(\n  dplyr,\n  glue,\n  here,\n  tidyr\n)\n\n\n\n\nread in the WIN txt pipe-delimited file\nsource(here(\"R/getData.R\"))\ndf &lt;- getData(params$org_id)\n\n\nSkipped lines:\nRequested report - WIN WAVES\nORGANIZATION ID = 21FLBBAP\nPROJECT ID - PROJECT NAME = JTDIEOFF - Julia Tuttle Die-Off Monitoring\nDEP ANALYTE GROUP = General Physical-Chemical | Biological | Nutrients\nDEP ANALYTE NAME - UNIT = Ammonia (N) - mg/L | Nitrogen- Total Kjeldahl - mg/L | Nitrate-Nitrite (N) - mg/L | pH - SU | Phosphorus- Total - mg/L | Salinity - PSU | Chlorophyll a, free of pheophytin - ug/L | Dissolved Oxygen - mg/L | Temperature, Water - deg C | Chlorophyll a- uncorrected - ug/L | Chlorophyll a- corrected - ug/L | Ammonia- Un-ionized (NH3) - mg/L\nReport Run on APRIL 30, 2025\nThe data you are accessing are from the WIN Warehouse.  The WIN Warehouse is refreshed on a weekly basis with new data that are submitted to WIN.  The refresh process occurs on the weekend; data uploaded to WIN through each Friday are available in the WIN Warehouse by the following Monday.  WIN replaces Florida STORET as an active data repository.  Florida STORET data are accessible through STORET Public Access (SPA).\nThe following data met your selection criteria\n\n\nConverted 0 latitude values from DMS to decimal format.\nConverted 0 longitude values from DMS to decimal format.\n\n\nread in the WIN txt pipe-delimited file\n# Ensure the result value column is numeric (coerce if needed)\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# 1. Ensure the result values are numeric\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n# 2. Build a wide “presence” table per Location × Analyte\npresence_table &lt;- df %&gt;%\n  group_by(Monitoring.Location.ID, DEP.Analyte.Name) %&gt;%\n  summarise(\n    # 1 if any non-NA exists, else 0\n    presence = ifelse(any(!is.na(DEP.Result.Value.Number)), 1L, 0L),\n    .groups = \"drop\"\n  ) %&gt;%\n  pivot_wider(\n    names_from  = DEP.Analyte.Name,\n    values_from = presence,\n    values_fill = list(presence = 0L)\n  )\n\n# 3. Pivot back to long for ggplot\nheat_long &lt;- presence_table %&gt;%\n  pivot_longer(\n    cols      = -Monitoring.Location.ID,\n    names_to  = \"DEP.Analyte.Name\",\n    values_to = \"presence\"\n  )\n\n\n\n\nCode\n# 4. Draw the heatmap with a white→steelblue gradient\nggplot(heat_long,\n       aes(x = DEP.Analyte.Name,\n           y = Monitoring.Location.ID,\n           fill = presence)) +\n  geom_tile(color = \"grey90\") +\n  scale_fill_gradient(\n    low    = \"white\",\n    high   = \"steelblue\",\n    limits = c(0, 1),\n    breaks = c(0, 1),\n    labels = c(\"0 (none)\", \"1 (some)\")\n  ) +\n  labs(\n    x    = \"DEP Analyte Name\",\n    y    = \"Monitoring Location ID\",\n    fill = \"Presence\\n(0/1)\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    axis.text.x  = element_text(angle = 45, hjust = 1),\n    panel.grid   = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\ncreate map with unique points (no clustering)\nlibrary(leaflet)\nlibrary(dplyr)\n\n# 1. Filter out rows & keep only one per unique lat/lon\ndf_unique_locs &lt;- df %&gt;%\n  filter(!is.na(Org.Decimal.Latitude), !is.na(Org.Decimal.Longitude)) %&gt;%\n  distinct(Org.Decimal.Latitude, Org.Decimal.Longitude, .keep_all = TRUE)\n\n# 2. Plot all unique points (no clustering)\nleaflet(df_unique_locs) %&gt;%\n  addProviderTiles(providers$OpenStreetMap) %&gt;%\n  addCircleMarkers(\n    lng         = ~Org.Decimal.Longitude,\n    lat         = ~Org.Decimal.Latitude,\n    radius      = 4,\n    color       = \"blue\",\n    fillOpacity = 0.5,\n    popup       = ~paste0(\n      \"Monitoring Location: \", Monitoring.Location.ID\n    )\n    # clusterOptions removed to show every point at all zoom levels\n  )\n\n\n\n\n\n\n\n\nvisualize distribution of points through time\nlibrary(ggplot2)\nlibrary(lubridate)\n\n# Convert Activity.Start.Date.Time to proper datetime if it isn't already\ndf$`Activity.Start.Date.Time` &lt;- as.POSIXct(as.character(df$`Activity.Start.Date.Time`), format = \"%m/%d/%Y %H:%M:%S\")\n\n\n# Create a dataframe with unique sampling events\nsampling_events &lt;- df %&gt;%\n  distinct(`Activity.Start.Date.Time`, Monitoring.Location.ID) %&gt;%\n  arrange(`Activity.Start.Date.Time`)\n\n# Create the time distribution plot\nggplot(sampling_events, aes(x = `Activity.Start.Date.Time`)) +\n  geom_histogram(bins = 30, fill = \"steelblue\", color = \"white\", alpha = 0.7) +\n  labs(\n    title = \"Distribution of Sampling Events Over Time\",\n    x = \"Date\",\n    y = \"Number of Sampling Events\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\nvisualize distribution of points through time\n# Create a heatmap of sampling locations over time\nggplot(sampling_events, \n       aes(x = `Activity.Start.Date.Time`, \n           y = Monitoring.Location.ID)) +\n  geom_point(color = \"steelblue\", alpha = 0.7) +\n  labs(\n    title = \"Sampling Locations Over Time\",\n    x = \"Date\",\n    y = \"Monitoring Location ID\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\nDownload Data For This Provider"
  },
  {
    "objectID": "provider_reports/provider_reports.html",
    "href": "provider_reports/provider_reports.html",
    "title": "Provider Reports",
    "section": "",
    "text": "BBAP Report\n\n\n\n\n\n\nTylar Murray\n\n\n\n\n\n\n\n\n\n\n\n\nBROWARD Report\n\n\n\n\n\n\nTylar Murray\n\n\n\n\n\n\n\n\n\n\n\n\nDERM_BBWQ Report\n\n\n\n\n\n\nTylar Murray\n\n\n\n\n\n\n\n\n\n\n\n\nFIU_WQMP Report\n\n\n\n\n\n\nTylar Murray\n\n\n\n\n\n\n\n\n\n\n\n\nPALMBEACH Report\n\n\n\n\n\n\nTylar Murray\n\n\n\n\n\n\n\n\n\n\n\n\nSFER Report\n\n\n\n\n\n\nTylar Murray\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "WIN_data_ingest",
    "section": "",
    "text": "Data ingestion and initial analysis from FL WIN water quality database and other sources.\nBelow is a demonstration of how to load the data.\nFor more information about the data please see “Provider Reports” in the top navigation.\n\n\nread in the WIN txt pipe-delimited file for example program.\nlibrarian::shelf(\n  dplyr,\n  glue,\n  here,\n  tidyr\n)\n\nsource(\"R/getData.R\")\ndf &lt;- getData(\"BBAP\")\n\n\nSkipped lines:\nRequested report - WIN WAVES\nORGANIZATION ID = 21FLBBAP\nPROJECT ID - PROJECT NAME = JTDIEOFF - Julia Tuttle Die-Off Monitoring\nDEP ANALYTE GROUP = General Physical-Chemical | Biological | Nutrients\nDEP ANALYTE NAME - UNIT = Ammonia (N) - mg/L | Nitrogen- Total Kjeldahl - mg/L | Nitrate-Nitrite (N) - mg/L | pH - SU | Phosphorus- Total - mg/L | Salinity - PSU | Chlorophyll a, free of pheophytin - ug/L | Dissolved Oxygen - mg/L | Temperature, Water - deg C | Chlorophyll a- uncorrected - ug/L | Chlorophyll a- corrected - ug/L | Ammonia- Un-ionized (NH3) - mg/L\nReport Run on APRIL 30, 2025\nThe data you are accessing are from the WIN Warehouse.  The WIN Warehouse is refreshed on a weekly basis with new data that are submitted to WIN.  The refresh process occurs on the weekend; data uploaded to WIN through each Friday are available in the WIN Warehouse by the following Monday.  WIN replaces Florida STORET as an active data repository.  Florida STORET data are accessible through STORET Public Access (SPA).\nThe following data met your selection criteria\n\n\nConverted 0 latitude values from DMS to decimal format.\nConverted 0 longitude values from DMS to decimal format.\n\n\n\n\nPrint the first few rows of the dataframe\n# head(df)\n\nlibrary(pander)\n\npander(head(df), digits = 6)\n\n\n\nTable continues below\n\n\n\n\n\n\n\nOrganization.ID\nMonitoring.Location.ID\nOrg.Decimal.Latitude\n\n\n\n\n21FLBBAP\nWQ04\n25.826\n\n\n21FLBBAP\nWQ02\n25.8533\n\n\n21FLBBAP\nWQ02\n25.8533\n\n\n21FLBBAP\nWQ04\n25.826\n\n\n21FLBBAP\nWQ04\n25.826\n\n\n21FLBBAP\nWQ04\n25.826\n\n\n\n\nTable continues below\n\n\n\n\n\n\nOrg.Latitude..DD.MM.SS.SSSS.\nOrg.Decimal.Longitude\n\n\n\n\nNA\n-80.1341\n\n\nNA\n-80.1455\n\n\nNA\n-80.1455\n\n\nNA\n-80.1341\n\n\nNA\n-80.1341\n\n\nNA\n-80.1341\n\n\n\n\nTable continues below\n\n\n\n\n\n\n\n\nOrg.Longitude..DD.MM.SS.SSSS.\nWBID\nActivity.ID\nActivity.Type\n\n\n\n\nNA\n3226H6\nWQ04-04/06/20\nSample\n\n\nNA\n3226H5\nWQ02-05/05/20\nSample\n\n\nNA\n3226H5\nWQ02-05/05/20\nSample\n\n\nNA\n3226H6\nWQ04-04/06/20\nSample\n\n\nNA\n3226H6\nWQ04-04/06/20\nSample\n\n\nNA\n3226H6\nWQ04-04/06/20\nSample\n\n\n\n\nTable continues below\n\n\n\n\n\n\n\nActivity.Start.Date.Time\nMatrix\nSample.Collection.Type\n\n\n\n\n04/06/2020 12:35:00\nAQUEOUS-Surface Water\nDirect Grab\n\n\n05/05/2020 15:00:00\nAQUEOUS-Surface Water\nDirect Grab\n\n\n05/05/2020 15:00:00\nAQUEOUS-Surface Water\nDirect Grab\n\n\n04/06/2020 12:35:00\nAQUEOUS-Surface Water\nDirect Grab\n\n\n04/06/2020 12:35:00\nAQUEOUS-Surface Water\nDirect Grab\n\n\n04/06/2020 12:35:00\nAQUEOUS-Surface Water\nDirect Grab\n\n\n\n\nTable continues below\n\n\n\n\n\n\n\nSampling.Agency.Name\nActivity.Depth\nActivity.Depth.Unit\n\n\n\n\nFDEP BISCAYNE BAY AQUATIC PRESERVES\n1.691\nm\n\n\nFDEP BISCAYNE BAY AQUATIC PRESERVES\n1.676\nm\n\n\nFDEP BISCAYNE BAY AQUATIC PRESERVES\n1.676\nm\n\n\nFDEP BISCAYNE BAY AQUATIC PRESERVES\n1.691\nm\n\n\nFDEP BISCAYNE BAY AQUATIC PRESERVES\n1.691\nm\n\n\nFDEP BISCAYNE BAY AQUATIC PRESERVES\n1.691\nm\n\n\n\n\nTable continues below\n\n\n\n\n\n\n\nActivity.Top.Depth\nActivity.Bottom.Depth\nActivity.Depth.Top.Bottom.Unit\n\n\n\n\nNA\nNA\nNA\n\n\nNA\nNA\nNA\n\n\nNA\nNA\nNA\n\n\nNA\nNA\nNA\n\n\nNA\nNA\nNA\n\n\nNA\nNA\nNA\n\n\n\n\nTable continues below\n\n\n\n\n\n\n\nDEP.Result.ID\nDEP.Analyte.Name\nDEP.Result.Value.Number\n\n\n\n\n7190664\nNitrate-Nitrite (N)\n0.007\n\n\n7187465\nNitrogen- Total Kjeldahl\n0.28\n\n\n7186300\nPhosphorus- Total\n0.01\n\n\n7190134\nPhosphorus- Total\n0.011\n\n\n7190741\nAmmonia (N)\n0.01\n\n\n7189987\nNitrogen- Total Kjeldahl\n0.26\n\n\n\n\nTable continues below\n\n\n\n\n\n\n\n\n\nDEP.Result.Value.Text\nDEP.Result.Unit\nDEP.MDL\nDEP.PQL\nValue.Qualifier\n\n\n\n\n\nmg/L\n0.004\n0.01\nI\n\n\n\nmg/L\n0.16\n0.4\nI\n\n\n\nmg/L\n0.004\n0.01\n\n\n\n\nmg/L\n0.004\n0.01\n\n\n\n\nmg/L\n0.002\n0.005\n\n\n\n\nmg/L\n0.16\n0.4\nI\n\n\n\n\n\n\n\n\n\n\n\n\nSample.Fraction\nLab.ID\nResult.Comments\nAudit.Censored.Decisions\n\n\n\n\nTotal\nE31780\n\nNA\n\n\nTotal\nE31780\n\nNA\n\n\nTotal\nE31780\n\nNA\n\n\nTotal\nE31780\n\nNA\n\n\nTotal\nE31780\n\nNA\n\n\nTotal\nE31780\n\nNA\n\n\n\n\n\n\nIf you have visualization ideas for this data, please open a github issue here."
  },
  {
    "objectID": "provider_reports/provider_reports/BROWARD.html",
    "href": "provider_reports/provider_reports/BROWARD.html",
    "title": "BROWARD Report",
    "section": "",
    "text": "WQ Provider Report\n\n\nCode\nlibrarian::shelf(\n  dplyr,\n  glue,\n  here,\n  tidyr\n)\n\n\n\n\nread in the WIN txt pipe-delimited file\nsource(here(\"R/getData.R\"))\ndf &lt;- getData(params$org_id)\n\n\nSkipped lines:\nRequested report - WIN WAVES\nORGANIZATION ID = 21FLBROW\nPROJECT ID - PROJECT NAME = PROJ-001 - Surfacewater Quality Monitoring Network\nCOUNTY = BROWARD, FLORIDA\nDEP ANALYTE GROUP = General Physical-Chemical | Biological | Nutrients\nDEP ANALYTE NAME - UNIT = Ammonia (N) - mg/L | Nitrogen- Total Kjeldahl - mg/L | Nitrate-Nitrite (N) - mg/L | Orthophosphate (P) - mg/L | pH - SU | Phosphorus- Total - mg/L | Salinity - PSU | Turbidity - NTU | Nitrogen- Total - mg/L | Dissolved Oxygen - mg/L | Temperature, Water - deg C | Chlorophyll a- corrected - ug/L | Ammonia- Un-ionized (NH3) - mg/L\nReport Run on APRIL 28, 2025\nThe data you are accessing are from the WIN Warehouse.  The WIN Warehouse is refreshed on a weekly basis with new data that are submitted to WIN.  The refresh process occurs on the weekend; data uploaded to WIN through each Friday are available in the WIN Warehouse by the following Monday.  WIN replaces Florida STORET as an active data repository.  Florida STORET data are accessible through STORET Public Access (SPA).\nThe following data met your selection criteria\n\n\nConverted 0 latitude values from DMS to decimal format.\nConverted 0 longitude values from DMS to decimal format.\n\n\nread in the WIN txt pipe-delimited file\n# Ensure the result value column is numeric (coerce if needed)\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# 1. Ensure the result values are numeric\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n# 2. Build a wide “presence” table per Location × Analyte\npresence_table &lt;- df %&gt;%\n  group_by(Monitoring.Location.ID, DEP.Analyte.Name) %&gt;%\n  summarise(\n    # 1 if any non-NA exists, else 0\n    presence = ifelse(any(!is.na(DEP.Result.Value.Number)), 1L, 0L),\n    .groups = \"drop\"\n  ) %&gt;%\n  pivot_wider(\n    names_from  = DEP.Analyte.Name,\n    values_from = presence,\n    values_fill = list(presence = 0L)\n  )\n\n# 3. Pivot back to long for ggplot\nheat_long &lt;- presence_table %&gt;%\n  pivot_longer(\n    cols      = -Monitoring.Location.ID,\n    names_to  = \"DEP.Analyte.Name\",\n    values_to = \"presence\"\n  )\n\n\n\n\nCode\n# 4. Draw the heatmap with a white→steelblue gradient\nggplot(heat_long,\n       aes(x = DEP.Analyte.Name,\n           y = Monitoring.Location.ID,\n           fill = presence)) +\n  geom_tile(color = \"grey90\") +\n  scale_fill_gradient(\n    low    = \"white\",\n    high   = \"steelblue\",\n    limits = c(0, 1),\n    breaks = c(0, 1),\n    labels = c(\"0 (none)\", \"1 (some)\")\n  ) +\n  labs(\n    x    = \"DEP Analyte Name\",\n    y    = \"Monitoring Location ID\",\n    fill = \"Presence\\n(0/1)\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    axis.text.x  = element_text(angle = 45, hjust = 1),\n    panel.grid   = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\ncreate map with unique points (no clustering)\nlibrary(leaflet)\nlibrary(dplyr)\n\n# 1. Filter out rows & keep only one per unique lat/lon\ndf_unique_locs &lt;- df %&gt;%\n  filter(!is.na(Org.Decimal.Latitude), !is.na(Org.Decimal.Longitude)) %&gt;%\n  distinct(Org.Decimal.Latitude, Org.Decimal.Longitude, .keep_all = TRUE)\n\n# 2. Plot all unique points (no clustering)\nleaflet(df_unique_locs) %&gt;%\n  addProviderTiles(providers$OpenStreetMap) %&gt;%\n  addCircleMarkers(\n    lng         = ~Org.Decimal.Longitude,\n    lat         = ~Org.Decimal.Latitude,\n    radius      = 4,\n    color       = \"blue\",\n    fillOpacity = 0.5,\n    popup       = ~paste0(\n      \"Monitoring Location: \", Monitoring.Location.ID\n    )\n    # clusterOptions removed to show every point at all zoom levels\n  )\n\n\n\n\n\n\n\n\nvisualize distribution of points through time\nlibrary(ggplot2)\nlibrary(lubridate)\n\n# Convert Activity.Start.Date.Time to proper datetime if it isn't already\ndf$`Activity.Start.Date.Time` &lt;- as.POSIXct(as.character(df$`Activity.Start.Date.Time`), format = \"%m/%d/%Y %H:%M:%S\")\n\n\n# Create a dataframe with unique sampling events\nsampling_events &lt;- df %&gt;%\n  distinct(`Activity.Start.Date.Time`, Monitoring.Location.ID) %&gt;%\n  arrange(`Activity.Start.Date.Time`)\n\n# Create the time distribution plot\nggplot(sampling_events, aes(x = `Activity.Start.Date.Time`)) +\n  geom_histogram(bins = 30, fill = \"steelblue\", color = \"white\", alpha = 0.7) +\n  labs(\n    title = \"Distribution of Sampling Events Over Time\",\n    x = \"Date\",\n    y = \"Number of Sampling Events\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\nvisualize distribution of points through time\n# Create a heatmap of sampling locations over time\nggplot(sampling_events, \n       aes(x = `Activity.Start.Date.Time`, \n           y = Monitoring.Location.ID)) +\n  geom_point(color = \"steelblue\", alpha = 0.7) +\n  labs(\n    title = \"Sampling Locations Over Time\",\n    x = \"Date\",\n    y = \"Monitoring Location ID\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\nDownload Data For This Provider"
  },
  {
    "objectID": "provider_reports/provider_reports/FIU_WQMP.html",
    "href": "provider_reports/provider_reports/FIU_WQMP.html",
    "title": "FIU_WQMP Report",
    "section": "",
    "text": "WQ Provider Report\n\n\nCode\nlibrarian::shelf(\n  dplyr,\n  glue,\n  here,\n  tidyr\n)\n\n\n\n\nread in the WIN txt pipe-delimited file\nsource(here(\"R/getData.R\"))\ndf &lt;- getData(params$org_id)\n\n\nSkipped lines:\nRequested report - WIN WAVES\nORGANIZATION ID = 21FLFWC\nPROJECT ID - PROJECT NAME = WQMP - Water Quality Monitoring Program | WQMP - Water Quality Monitoring Program | EPA - Water Quality Monitoring Program | SJCUD RIVER SAMPLING - Water Quality Monitoring Program | WQMP - Water Quality Monitoring Program | WQMP - Water Quality Monitoring Program | WQMP - Tampa Bay Water Alafia River Watershed Water Quality Monitoring\nDEP ANALYTE GROUP = General Physical-Chemical | Biological | Nutrients\nDEP ANALYTE NAME - UNIT = Ammonia (N) - mg/L | Nitrogen- Total Kjeldahl - mg/L | Nitrate (N) - mg/L | Nitrate-Nitrite (N) - mg/L | Nitrite (N) - mg/L | Orthophosphate (P) - mg/L | pH - SU | Phosphorus- Total - mg/L | Salinity - PSU | Turbidity - NTU | Nitrogen- Total - mg/L | Silica (SiO2) - mg/L | Dissolved Oxygen - mg/L | Temperature, Water - deg C | Chlorophyll a- uncorrected - ug/L | Silicate - mg/L\nReport Run on APRIL 29, 2025\nThe data you are accessing are from the WIN Warehouse.  The WIN Warehouse is refreshed on a weekly basis with new data that are submitted to WIN.  The refresh process occurs on the weekend; data uploaded to WIN through each Friday are available in the WIN Warehouse by the following Monday.  WIN replaces Florida STORET as an active data repository.  Florida STORET data are accessible through STORET Public Access (SPA).\nThe following data met your selection criteria\n\n\nConverted 0 latitude values from DMS to decimal format.\nConverted 0 longitude values from DMS to decimal format.\n\n\nread in the WIN txt pipe-delimited file\n# Ensure the result value column is numeric (coerce if needed)\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# 1. Ensure the result values are numeric\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n# 2. Build a wide “presence” table per Location × Analyte\npresence_table &lt;- df %&gt;%\n  group_by(Monitoring.Location.ID, DEP.Analyte.Name) %&gt;%\n  summarise(\n    # 1 if any non-NA exists, else 0\n    presence = ifelse(any(!is.na(DEP.Result.Value.Number)), 1L, 0L),\n    .groups = \"drop\"\n  ) %&gt;%\n  pivot_wider(\n    names_from  = DEP.Analyte.Name,\n    values_from = presence,\n    values_fill = list(presence = 0L)\n  )\n\n# 3. Pivot back to long for ggplot\nheat_long &lt;- presence_table %&gt;%\n  pivot_longer(\n    cols      = -Monitoring.Location.ID,\n    names_to  = \"DEP.Analyte.Name\",\n    values_to = \"presence\"\n  )\n\n\n\n\nCode\n# 4. Draw the heatmap with a white→steelblue gradient\nggplot(heat_long,\n       aes(x = DEP.Analyte.Name,\n           y = Monitoring.Location.ID,\n           fill = presence)) +\n  geom_tile(color = \"grey90\") +\n  scale_fill_gradient(\n    low    = \"white\",\n    high   = \"steelblue\",\n    limits = c(0, 1),\n    breaks = c(0, 1),\n    labels = c(\"0 (none)\", \"1 (some)\")\n  ) +\n  labs(\n    x    = \"DEP Analyte Name\",\n    y    = \"Monitoring Location ID\",\n    fill = \"Presence\\n(0/1)\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    axis.text.x  = element_text(angle = 45, hjust = 1),\n    panel.grid   = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\ncreate map with unique points (no clustering)\nlibrary(leaflet)\nlibrary(dplyr)\n\n# 1. Filter out rows & keep only one per unique lat/lon\ndf_unique_locs &lt;- df %&gt;%\n  filter(!is.na(Org.Decimal.Latitude), !is.na(Org.Decimal.Longitude)) %&gt;%\n  distinct(Org.Decimal.Latitude, Org.Decimal.Longitude, .keep_all = TRUE)\n\n# 2. Plot all unique points (no clustering)\nleaflet(df_unique_locs) %&gt;%\n  addProviderTiles(providers$OpenStreetMap) %&gt;%\n  addCircleMarkers(\n    lng         = ~Org.Decimal.Longitude,\n    lat         = ~Org.Decimal.Latitude,\n    radius      = 4,\n    color       = \"blue\",\n    fillOpacity = 0.5,\n    popup       = ~paste0(\n      \"Monitoring Location: \", Monitoring.Location.ID\n    )\n    # clusterOptions removed to show every point at all zoom levels\n  )\n\n\n\n\n\n\n\n\nvisualize distribution of points through time\nlibrary(ggplot2)\nlibrary(lubridate)\n\n# Convert Activity.Start.Date.Time to proper datetime if it isn't already\ndf$`Activity.Start.Date.Time` &lt;- as.POSIXct(as.character(df$`Activity.Start.Date.Time`), format = \"%m/%d/%Y %H:%M:%S\")\n\n\n# Create a dataframe with unique sampling events\nsampling_events &lt;- df %&gt;%\n  distinct(`Activity.Start.Date.Time`, Monitoring.Location.ID) %&gt;%\n  arrange(`Activity.Start.Date.Time`)\n\n# Create the time distribution plot\nggplot(sampling_events, aes(x = `Activity.Start.Date.Time`)) +\n  geom_histogram(bins = 30, fill = \"steelblue\", color = \"white\", alpha = 0.7) +\n  labs(\n    title = \"Distribution of Sampling Events Over Time\",\n    x = \"Date\",\n    y = \"Number of Sampling Events\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\nvisualize distribution of points through time\n# Create a heatmap of sampling locations over time\nggplot(sampling_events, \n       aes(x = `Activity.Start.Date.Time`, \n           y = Monitoring.Location.ID)) +\n  geom_point(color = \"steelblue\", alpha = 0.7) +\n  labs(\n    title = \"Sampling Locations Over Time\",\n    x = \"Date\",\n    y = \"Monitoring Location ID\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\nDownload Data For This Provider"
  },
  {
    "objectID": "provider_reports/provider_reports/SFER.html",
    "href": "provider_reports/provider_reports/SFER.html",
    "title": "SFER Report",
    "section": "",
    "text": "WQ Provider Report\n\n\nCode\nlibrarian::shelf(\n  dplyr,\n  glue,\n  here,\n  tidyr\n)\n\n\n\n\nread in the WIN txt pipe-delimited file\nsource(here(\"R/getData.R\"))\ndf &lt;- getData(params$org_id)\n\n\nRenaming column keyfield to DEP.Result.ID \nFirst few values of keyfield : 20140112_1323_WS14335_1_0_Surf 20140112_1332_WS14335_2_0_Surf 20140112_1353_WS14335_3_0_Surf 20140112_1710_WS14335_EKIN_0_Surf 20140112_1721_WS14335_EKMID_0_Surf 20140112_1918_WS14335_4_0_Surf \nAfter renaming, first few values of DEP.Result.ID : 20140112_1323_WS14335_1_0_Surf 20140112_1332_WS14335_2_0_Surf 20140112_1353_WS14335_3_0_Surf 20140112_1710_WS14335_EKIN_0_Surf 20140112_1721_WS14335_EKMID_0_Surf 20140112_1918_WS14335_4_0_Surf \nRenaming column cruise_id to Activity.ID \nFirst few values of cruise_id : WS14335 WS14335 WS14335 WS14335 WS14335 WS14335 \nAfter renaming, first few values of Activity.ID : WS14335 WS14335 WS14335 WS14335 WS14335 WS14335 \nRenaming column station to Monitoring.Location.ID \nFirst few values of station : 1 2 3 EKIN EKMID 4 \nAfter renaming, first few values of Monitoring.Location.ID : 1 2 3 EKIN EKMID 4 \nRenaming column station_type to Activity.Type \nFirst few values of station_type : F F F F F F \nAfter renaming, first few values of Activity.Type : F F F F F F \nRenaming column datetime to Activity.Start.Date.Time \nFirst few values of datetime : 2014-12-01 13:23:00 2014-12-01 13:32:00 2014-12-01 13:53:00 2014-12-01 17:10:00 2014-12-01 17:21:00 2014-12-01 19:18:00 \nAfter renaming, first few values of Activity.Start.Date.Time : 2014-12-01 13:23:00 2014-12-01 13:32:00 2014-12-01 13:53:00 2014-12-01 17:10:00 2014-12-01 17:21:00 2014-12-01 19:18:00 \nRenaming column lat_dec to Org.Decimal.Latitude \nFirst few values of lat_dec : 25.645 25.6415 25.6458 25.3336 25.3164 25.1087 \nAfter renaming, first few values of Org.Decimal.Latitude : 25.645 25.6415 25.6458 25.3336 25.3164 25.1087 \nRenaming column lon_dec to Org.Decimal.Longitude \nFirst few values of lon_dec : -80.1252 -80.1042 -80.0818 -80.2231 -80.1949 -80.3826 \nAfter renaming, first few values of Org.Decimal.Longitude : -80.1252 -80.1042 -80.0818 -80.2231 -80.1949 -80.3826 \nRenaming column depth to Activity.Depth \nFirst few values of depth : 0 0 0 0 0 0 \nAfter renaming, first few values of Activity.Depth : 0 0 0 0 0 0 \nRenaming column depth_class to Activity.Depth.Unit \nFirst few values of depth_class : Surface Surface Surface Surface Surface Surface \nAfter renaming, first few values of Activity.Depth.Unit : Surface Surface Surface Surface Surface Surface \nRenaming column depth_order to Activity.Depth.Top.Bottom.Unit \nFirst few values of depth_order : Surf Surf Surf Surf Surf Surf \nAfter renaming, first few values of Activity.Depth.Top.Bottom.Unit : Surf Surf Surf Surf Surf Surf \nRenaming column cast to Sample.Collection.Type \nFirst few values of cast : 0 0 0 0 0 0 \nAfter renaming, first few values of Sample.Collection.Type : 0 0 0 0 0 0 \nRenaming column nisk_start to Activity.Top.Depth \nFirst few values of nisk_start : NA NA NA NA NA NA \nAfter renaming, first few values of Activity.Top.Depth : NA NA NA NA NA NA \nRenaming column nisk_end to Activity.Bottom.Depth \nFirst few values of nisk_end : NA NA NA NA NA NA \nAfter renaming, first few values of Activity.Bottom.Depth : NA NA NA NA NA NA \nRenaming column o2_disc_flag to Value.Qualifier \nFirst few values of o2_disc_flag : NA NA NA NA NA NA \nAfter renaming, first few values of Value.Qualifier : NA NA NA NA NA NA \nRenaming column nh4_flag to Value.Qualifier \nFirst few values of nh4_flag : NA NA NA NA NA NA \nAfter renaming, first few values of Value.Qualifier : NA NA NA NA NA NA \nRenaming column no2_flag to Value.Qualifier \nFirst few values of no2_flag : NA NA NA NA NA NA \nAfter renaming, first few values of Value.Qualifier : NA NA NA NA NA NA \nRenaming column no3_flag to Value.Qualifier \nFirst few values of no3_flag : NA NA NA NA NA NA \nAfter renaming, first few values of Value.Qualifier : NA NA NA NA NA NA \nRenaming column no3_no2_flag to Value.Qualifier \nFirst few values of no3_no2_flag : NA NA NA NA NA NA \nAfter renaming, first few values of Value.Qualifier : NA NA NA NA NA NA \nRenaming column po4_flag to Value.Qualifier \nFirst few values of po4_flag : NA NA NA NA NA NA \nAfter renaming, first few values of Value.Qualifier : NA NA NA NA NA NA \nRenaming column si_flag to Value.Qualifier \nFirst few values of si_flag : NA NA NA NA NA NA \nAfter renaming, first few values of Value.Qualifier : NA NA NA NA NA NA \nRenaming column avg_chl_a_flag to Value.Qualifier \nFirst few values of avg_chl_a_flag : NA NA NA NA NA NA \nAfter renaming, first few values of Value.Qualifier : NA NA NA NA NA NA \nRenaming column avg_phaeo_flag to Value.Qualifier \nFirst few values of avg_phaeo_flag : NA NA NA NA NA NA \nAfter renaming, first few values of Value.Qualifier : NA NA NA NA NA NA \nRenaming column notes to Result.Comments \nFirst few values of notes : NA NA NA NA NA NA \nAfter renaming, first few values of Result.Comments : NA NA NA NA NA NA \nFound non-NA values in Activity.Start.Date.Time\nConverting from YYYY-MM-DD string to MM/DD/YYYY format\nAfter conversion from YYYY-MM-DD to MM/DD/YYYY, first few values: 12/01/2014 13:23:00 12/01/2014 13:32:00 12/01/2014 13:53:00 12/01/2014 17:10:00 12/01/2014 17:21:00 12/01/2014 19:18:00 \nConverted 0 latitude values from DMS to decimal format.\nConverted 0 longitude values from DMS to decimal format.\n\n\nread in the WIN txt pipe-delimited file\n# Ensure the result value column is numeric (coerce if needed)\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# 1. Ensure the result values are numeric\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n# 2. Build a wide “presence” table per Location × Analyte\npresence_table &lt;- df %&gt;%\n  group_by(Monitoring.Location.ID, DEP.Analyte.Name) %&gt;%\n  summarise(\n    # 1 if any non-NA exists, else 0\n    presence = ifelse(any(!is.na(DEP.Result.Value.Number)), 1L, 0L),\n    .groups = \"drop\"\n  ) %&gt;%\n  pivot_wider(\n    names_from  = DEP.Analyte.Name,\n    values_from = presence,\n    values_fill = list(presence = 0L)\n  )\n\n# 3. Pivot back to long for ggplot\nheat_long &lt;- presence_table %&gt;%\n  pivot_longer(\n    cols      = -Monitoring.Location.ID,\n    names_to  = \"DEP.Analyte.Name\",\n    values_to = \"presence\"\n  )\n\n\n\n\nCode\n# 4. Draw the heatmap with a white→steelblue gradient\nggplot(heat_long,\n       aes(x = DEP.Analyte.Name,\n           y = Monitoring.Location.ID,\n           fill = presence)) +\n  geom_tile(color = \"grey90\") +\n  scale_fill_gradient(\n    low    = \"white\",\n    high   = \"steelblue\",\n    limits = c(0, 1),\n    breaks = c(0, 1),\n    labels = c(\"0 (none)\", \"1 (some)\")\n  ) +\n  labs(\n    x    = \"DEP Analyte Name\",\n    y    = \"Monitoring Location ID\",\n    fill = \"Presence\\n(0/1)\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    axis.text.x  = element_text(angle = 45, hjust = 1),\n    panel.grid   = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\ncreate map with unique points (no clustering)\nlibrary(leaflet)\nlibrary(dplyr)\n\n# 1. Filter out rows & keep only one per unique lat/lon\ndf_unique_locs &lt;- df %&gt;%\n  filter(!is.na(Org.Decimal.Latitude), !is.na(Org.Decimal.Longitude)) %&gt;%\n  distinct(Org.Decimal.Latitude, Org.Decimal.Longitude, .keep_all = TRUE)\n\n# 2. Plot all unique points (no clustering)\nleaflet(df_unique_locs) %&gt;%\n  addProviderTiles(providers$OpenStreetMap) %&gt;%\n  addCircleMarkers(\n    lng         = ~Org.Decimal.Longitude,\n    lat         = ~Org.Decimal.Latitude,\n    radius      = 4,\n    color       = \"blue\",\n    fillOpacity = 0.5,\n    popup       = ~paste0(\n      \"Monitoring Location: \", Monitoring.Location.ID\n    )\n    # clusterOptions removed to show every point at all zoom levels\n  )\n\n\n\n\n\n\n\n\nvisualize distribution of points through time\nlibrary(ggplot2)\nlibrary(lubridate)\n\n# Convert Activity.Start.Date.Time to proper datetime if it isn't already\ndf$`Activity.Start.Date.Time` &lt;- as.POSIXct(as.character(df$`Activity.Start.Date.Time`), format = \"%m/%d/%Y %H:%M:%S\")\n\n\n# Create a dataframe with unique sampling events\nsampling_events &lt;- df %&gt;%\n  distinct(`Activity.Start.Date.Time`, Monitoring.Location.ID) %&gt;%\n  arrange(`Activity.Start.Date.Time`)\n\n# Create the time distribution plot\nggplot(sampling_events, aes(x = `Activity.Start.Date.Time`)) +\n  geom_histogram(bins = 30, fill = \"steelblue\", color = \"white\", alpha = 0.7) +\n  labs(\n    title = \"Distribution of Sampling Events Over Time\",\n    x = \"Date\",\n    y = \"Number of Sampling Events\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\nvisualize distribution of points through time\n# Create a heatmap of sampling locations over time\nggplot(sampling_events, \n       aes(x = `Activity.Start.Date.Time`, \n           y = Monitoring.Location.ID)) +\n  geom_point(color = \"steelblue\", alpha = 0.7) +\n  labs(\n    title = \"Sampling Locations Over Time\",\n    x = \"Date\",\n    y = \"Monitoring Location ID\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\nDownload Data For This Provider"
  }
]