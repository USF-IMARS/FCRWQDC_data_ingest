[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "WIN_data_ingest",
    "section": "",
    "text": "Data ingestion and initial analysis from FL WIN water quality database.\nread in the WIN txt pipe-delimited file\n# Read all lines from the file\nall_lines &lt;- readLines(\"data/tina_WIN_WAVES_UDOUJ_TH_1_20250304141103_89325.txt\")\n\n# Locate the header line (assumes it starts with \"Organization ID\")\nheader_index &lt;- grep('^\"Organization ID\"', all_lines)[1]\n\n# Print the skipped lines (everything before the header)\ncat(\"Skipped lines:\\n\")\n\n\nSkipped lines:\n\n\nread in the WIN txt pipe-delimited file\ncat(all_lines[1:(header_index - 1)], sep = \"\\n\")\n\n\nRequested report - WIN WAVES\nPROJECT ID - PROJECT NAME = PROJ-001 - Surfacewater Quality Monitoring Network | WQMP - Water Quality Monitoring Program | JTDIEOFF - Julia Tuttle Die-Off Monitoring | FKNMSFIELD - FKNMS-DEP Field Sampling | WQMP - Water Quality Monitoring Program | EPA - Water Quality Monitoring Program | SJCUD RIVER SAMPLING - Water Quality Monitoring Program | BBWQ - Biscayne Bay Water Quality | WQMP - Water Quality Monitoring Program | BBWQ - Biscayne Bay Water Quality Monitoring Program | WQMP - Water Quality Monitoring Program | ERMWQ - PBC ERM Ambient Water Quality Monitoring | WQMP - Tampa Bay Water Alafia River Watershed Water Quality Monitoring\nPROJECT INTENDED USE = Routine Monitoring | IWR Assessment/TMDL Listing | Modeling | 319 Program | BMAP | Trend Analysis | Event Response\nCOUNTY = BROWARD, FLORIDA | MARTIN, FLORIDA | MIAMI-DADE, FLORIDA | MONROE, FLORIDA | PALM BEACH, FLORIDA\nDEP ANALYTE GROUP = General Physical-Chemical | Field Observation | Nutrients\nDEP ANALYTE NAME - UNIT = Ammonia (N) - mg/kg | Ammonia (N) - mg/L | Nitrogen- Total Kjeldahl - mg/kg | Nitrogen- Total Kjeldahl - mg/L | Nitrate (N) - mg/L | Nitrate-Nitrite (N) - mg/kg | Nitrate-Nitrite (N) - mg/L | Nitrite (N) - mg/kg | Nitrite (N) - mg/L | Orthophosphate (P) - mg/L | pH - SU | Phosphorus- Total - mg/kg | Phosphorus- Total - mg/L | Salinity - PSU | Carbon- Organic - mg/kg | Carbon- Organic - mg/L | Nitrogen- Total - mg/L | Silica (SiO2) - mg/L | Dissolved Oxygen - mg/L | Temperature, Water - deg C | Carbon- Total - mg/kg | Silicate - mg/L\nReport Run on MARCH 4, 2025\nThe data you are accessing are from the WIN Warehouse.  The WIN Warehouse is refreshed on a weekly basis with new data that are submitted to WIN.  The refresh process occurs on the weekend; data uploaded to WIN through each Friday are available in the WIN Warehouse by the following Monday.  WIN replaces Florida STORET as an active data repository.  Florida STORET data are accessible through STORET Public Access (SPA).\nThe following data met your selection criteria\n\n\nread in the WIN txt pipe-delimited file\ncat(\"\\n\\n\")\n\n\nread in the WIN txt pipe-delimited file\n# Extract the header line\nheader_line &lt;- all_lines[header_index]\n\n# Determine the expected number of columns based on the header line\nexpected_cols &lt;- length(strsplit(header_line, \"\\\\|\")[[1]])\n\n# Extract all remaining lines (which may contain multi-line records)\nraw_data_lines &lt;- all_lines[(header_index + 1):length(all_lines)]\n\n# Reassemble rows by combining lines until the number of delimiters (pipes) matches expectation.\ncombined_rows &lt;- character(0)\ntemp_row &lt;- \"\"\n\nfor (line in raw_data_lines) {\n  # Start a new temporary row or append to the existing one\n  temp_row &lt;- if (temp_row == \"\") line else paste(temp_row, line, sep = \"\\n\")\n  \n  # Count the number of pipe delimiters in temp_row\n  n_delim &lt;- length(gregexpr(\"\\\\|\", temp_row)[[1]])\n  \n  # If the row has the expected number of delimiters (one less than columns), it's complete.\n  if (n_delim == (expected_cols - 1)) {\n    combined_rows &lt;- c(combined_rows, temp_row)\n    temp_row &lt;- \"\"  # Reset for the next record\n  }\n}\n\n# In case any data remains in temp_row, add it as a record\nif (temp_row != \"\") {\n  combined_rows &lt;- c(combined_rows, temp_row)\n}\n\n# Reassemble the complete text with header and data rows\nfull_text &lt;- paste(c(header_line, combined_rows), collapse = \"\\n\")\n\n# Read the data from the reassembled text\ndf &lt;- read.table(text = full_text,\n                 sep = \"|\",\n                 header = TRUE,\n                 quote = \"\\\"\",\n                 fill = TRUE,\n                 stringsAsFactors = FALSE)\nPrint the first few rows of the dataframe\n# head(df)\n\nlibrary(pander)\n\npander(head(df), digits = 6)\n\n\n\nTable continues below\n\n\n\n\n\n\n\nOrganization.ID\nOrganization.Name\nMonitoring.Location.ID\n\n\n\n\n21FLKNMS\nFLORIDA KEYS NATIONAL MARINE SANCTUARY\nG5AP0022\n\n\n21FLKNMS\nFLORIDA KEYS NATIONAL MARINE SANCTUARY\nG5AP0008\n\n\n21FLKNMS\nFLORIDA KEYS NATIONAL MARINE SANCTUARY\nG5AP0009\n\n\n21FLKNMS\nFLORIDA KEYS NATIONAL MARINE SANCTUARY\nG5WA0004\n\n\n21FLKNMS\nFLORIDA KEYS NATIONAL MARINE SANCTUARY\nMON-STOCKIS-2\n\n\n21FLKNMS\nFLORIDA KEYS NATIONAL MARINE SANCTUARY\nG5WA0003\n\n\n\n\nTable continues below\n\n\n\n\n\n\n\n\nMonitoring.Location.Name\nPrimary.Type\nSecondary.Type\nDEP.Latitude\n\n\n\n\nDRTO - Loggerhead Forest\nSurface Water\nEstuary\n24.6624\n\n\nPennekamp (Ocean Forest)\nSurface Water\nEstuary\n25.2237\n\n\nPennekamp (Garden Cove))\nSurface Water\nEstuary\n25.1709\n\n\nLignumvitae Key (Indian Key Fill - Oceanside)\nSurface Water\nEstuary\n24.893\n\n\nMonroe-Stock Island-2\nSurface Water\nEstuary\n24.5676\n\n\nLignumvitae Key (Indian Key Fill - Bayside)\nSurface Water\nEstuary\n24.8892\n\n\n\n\nTable continues below\n\n\n\n\n\n\n\n\nDEP.Longitude\nFHD.Reach.Code\nSTORET.Monitoring.Location.ID\nCounty\n\n\n\n\n-82.9274\nNA\n\nMONROE\n\n\n-80.3274\nNA\n\nMONROE\n\n\n-80.3671\nNA\n\nMONROE\n\n\n-80.669\nNA\n\nMONROE\n\n\n-81.7355\nNA\n\nMONROE\n\n\n-80.6776\nNA\n\nMONROE\n\n\n\n\nTable continues below\n\n\n\n\n\n\n\n\nWBID\nProject.ID\nActivity.ID\nActivity.Start.Date.Time\n\n\n\n\n8072\nFKNMSFIELD\n46142G5P00222\n02/26/2022 15:24:00\n\n\n6006B\nFKNMSFIELD\n42509G5P0008A\n02/24/2021 09:49:00\n\n\n6006B\nFKNMSFIELD\n43481G5P0009A\n05/27/2021 09:09:00\n\n\n8084\nFKNMSFIELD\n82820G5A00004\n08/28/2020 13:50:00\n\n\n6014B\nFKNMSFIELD\n47034MO-STO-2\n05/24/2022 10:24:00\n\n\n8077H\nFKNMSFIELD\n43186G5A00003\n04/29/2021 11:40:00\n\n\n\n\nTable continues below\n\n\n\n\n\n\n\nSampling.Agency.Name\nActivity.Depth\nActivity.Depth.Unit\n\n\n\n\nFDEP FLORIDA KEYS NATIONAL MARINE SANCTUARY\n1\nm\n\n\nFDEP FLORIDA KEYS NATIONAL MARINE SANCTUARY\n0.5\nm\n\n\nFDEP FLORIDA KEYS NATIONAL MARINE SANCTUARY\n0.5\nm\n\n\nFDEP FLORIDA KEYS NATIONAL MARINE SANCTUARY\n0.5\nm\n\n\nFDEP FLORIDA KEYS NATIONAL MARINE SANCTUARY\n0.5\nm\n\n\nFDEP FLORIDA KEYS NATIONAL MARINE SANCTUARY\n0.5\nm\n\n\n\n\nTable continues below\n\n\n\n\n\n\n\nDEP.Analyte.Name\nDEP.Result.Value.Number\nDEP.Result.Value.Text\n\n\n\n\nTemperature, Water\n24.67\n\n\n\nDissolved Oxygen\n5.09\n\n\n\nDissolved Oxygen\n1.55\n\n\n\nTemperature, Water\n32.7\n\n\n\npH\n7.79\n\n\n\nDissolved Oxygen\n6.79\n\n\n\n\n\n\n\n\n\n\n\n\n\nDEP.Result.Unit\nDEP.MDL\nDEP.PQL\nValue.Qualifier\n\n\n\n\ndeg C\nNA\nNA\n\n\n\nmg/L\nNA\nNA\n\n\n\nmg/L\nNA\nNA\n\n\n\ndeg C\nNA\nNA\n\n\n\nSU\nNA\nNA\n\n\n\nmg/L\nNA\nNA"
  },
  {
    "objectID": "index.html#organization-contributions",
    "href": "index.html#organization-contributions",
    "title": "WIN_data_ingest",
    "section": "Organization Contributions",
    "text": "Organization Contributions\n\n\nprint table\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Ensure the result value column is numeric (coerce if needed)\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n# Create a table that, for each combination of Organization.ID and Monitoring.Location.ID,\n# shows 1 if any non-NA DEP.Result.Value.Number exists for that DEP.Analyte.Name, 0 otherwise.\npresence_table &lt;- df %&gt;%\n  group_by(Organization.ID, Monitoring.Location.ID, DEP.Analyte.Name) %&gt;%\n  summarize(presence = ifelse(any(!is.na(DEP.Result.Value.Number)), 1, 0),\n            .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = DEP.Analyte.Name,\n              values_from = presence,\n              values_fill = list(presence = 0))\n\n# Print the resulting table\n# print(presence_table)\n\nlibrary(DT)\n\n# Determine which columns correspond to analytes (i.e. presence/absence columns)\nanalyte_cols &lt;- setdiff(names(presence_table), c(\"Organization.ID\", \"Monitoring.Location.ID\"))\n\n# Create an interactive datatable with colored cells for 0 and 1 values.\ndatatable(presence_table, options = list(pageLength = 10)) %&gt;%\n  formatStyle(\n    columns = analyte_cols,\n    backgroundColor = styleEqual(c(0, 1), c(\"lightcoral\", \"lightgreen\"))\n  )\n\n\n\n\n\n\nmap? maybe Tinaâ€™s has lat+lon\n\nIf you have more visualization ideas for this data, please open a github issue here."
  }
]