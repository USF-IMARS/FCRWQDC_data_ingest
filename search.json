[
  {
    "objectID": "provider_reports/provider_reports_template.html",
    "href": "provider_reports/provider_reports_template.html",
    "title": "BROWARD Data",
    "section": "",
    "text": "WQ Provider Data\n\n\nCode\nlibrarian::shelf(\n  dplyr,\n  glue,\n  here,\n  tidyr\n)\n\n\n\n\nread in the WIN txt pipe-delimited file\nsource(here(\"R/getData.R\"))\ndf &lt;- getData(params$org_id)\n\n# Ensure the result value column is numeric (coerce if needed)\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# 1. Ensure the result values are numeric\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n# 2. Build a wide “presence” table per Location × Analyte\npresence_table &lt;- df %&gt;%\n  group_by(Monitoring.Location.ID, DEP.Analyte.Name) %&gt;%\n  summarise(\n    # 1 if any non-NA exists, else 0\n    presence = ifelse(any(!is.na(DEP.Result.Value.Number)), 1L, 0L),\n    .groups = \"drop\"\n  ) %&gt;%\n  pivot_wider(\n    names_from  = DEP.Analyte.Name,\n    values_from = presence,\n    values_fill = list(presence = 0L)\n  )\n\n# 3. Pivot back to long for ggplot\nheat_long &lt;- presence_table %&gt;%\n  pivot_longer(\n    cols      = -Monitoring.Location.ID,\n    names_to  = \"DEP.Analyte.Name\",\n    values_to = \"presence\"\n  )\n\n\n\n\nCode\n# 4. Draw the heatmap with a white→steelblue gradient\nggplot(heat_long,\n       aes(x = DEP.Analyte.Name,\n           y = Monitoring.Location.ID,\n           fill = presence)) +\n  geom_tile(color = \"grey90\") +\n  scale_fill_gradient(\n    low    = \"white\",\n    high   = \"steelblue\",\n    limits = c(0, 1),\n    breaks = c(0, 1),\n    labels = c(\"0 (none)\", \"1 (some)\")\n  ) +\n  labs(\n    x    = \"DEP Analyte Name\",\n    y    = \"Monitoring Location ID\",\n    fill = \"Presence\\n(0/1)\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    axis.text.x  = element_text(angle = 45, hjust = 1),\n    panel.grid   = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\ncreate map with unique points (no clustering)\nlibrary(leaflet)\nlibrary(dplyr)\n\n# 1. Filter out rows & keep only one per unique lat/lon\ndf_unique_locs &lt;- df %&gt;%\n  filter(!is.na(Org.Decimal.Latitude), !is.na(Org.Decimal.Longitude)) %&gt;%\n  distinct(Org.Decimal.Latitude, Org.Decimal.Longitude, .keep_all = TRUE)\n\n# 2. Plot all unique points (no clustering)\nleaflet(df_unique_locs) %&gt;%\n  addProviderTiles(providers$OpenStreetMap) %&gt;%\n  addCircleMarkers(\n    lng         = ~Org.Decimal.Longitude,\n    lat         = ~Org.Decimal.Latitude,\n    radius      = 4,\n    color       = \"blue\",\n    fillOpacity = 0.5,\n    popup       = ~paste0(\n      \"Monitoring Location: \", Monitoring.Location.ID\n    )\n    # clusterOptions removed to show every point at all zoom levels\n  )\n\n\n\n\n\n\n\n\nvisualize distribution of points through time\nlibrary(ggplot2)\nlibrary(lubridate)\n\n# Convert Activity.Start.Date.Time to proper datetime if it isn't already\ndf$`Activity.Start.Date.Time` &lt;- as.POSIXct(as.character(df$`Activity.Start.Date.Time`), format = \"%m/%d/%Y %H:%M:%S\")\n\n\n# Create a dataframe with unique sampling events\nsampling_events &lt;- df %&gt;%\n  distinct(`Activity.Start.Date.Time`, Monitoring.Location.ID) %&gt;%\n  arrange(`Activity.Start.Date.Time`)\n\n\n\n\nCreate time distribution plot\nggplot(sampling_events, aes(x = `Activity.Start.Date.Time`)) +\n  geom_histogram(bins = 30, fill = \"steelblue\", color = \"white\", alpha = 0.7) +\n  labs(\n    title = \"Distribution of Sampling Events Over Time\",\n    x = \"Date\",\n    y = \"Number of Sampling Events\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Create a heatmap of sampling locations over time\n# drop rows with missing dates or IDs\nsampling_events &lt;- sampling_events %&gt;%\n  filter(!is.na(`Activity.Start.Date.Time`), !is.na(Monitoring.Location.ID))\n# if sampling_events is empty, skip this plot\nif (nrow(sampling_events) &gt; 0) {\n  ggplot(sampling_events, \n          aes(x = `Activity.Start.Date.Time`, \n              y = Monitoring.Location.ID)) +\n      geom_point(color = \"steelblue\", alpha = 0.7) +\n      labs(\n        title = \"Sampling Locations Over Time\",\n        x = \"Date\",\n        y = \"Monitoring Location ID\"\n      ) +\n      theme_minimal() +\n      theme(\n        axis.text.x = element_text(angle = 45, hjust = 1),\n        panel.grid.minor = element_blank()\n      )\n} else {\n  print(\"No sampling events with valid dates & IDs\")\n}\n\n\n[1] \"No sampling events with valid dates & IDs\"\n\n\n\n\nCode\ndate_range &lt;- range(df$`Activity.Start.Date.Time`, na.rm = TRUE)\n  cat(\"Earliest sampling date: \", format(date_range[1], \"%Y-%m-%d %H:%M:%S\"), \"\\n\")\n\n\nEarliest sampling date:  Inf \n\n\nCode\n  cat(\"Latest   sampling date: \", format(date_range[2], \"%Y-%m-%d %H:%M:%S\"), \"\\n\")\n\n\nLatest   sampling date:  -Inf \n\n\n\nDownload Data For This Provider"
  },
  {
    "objectID": "provider_reports/provider_reports/PALMBEACH.html",
    "href": "provider_reports/provider_reports/PALMBEACH.html",
    "title": "PALMBEACH Data",
    "section": "",
    "text": "WQ Provider Data\n\n\nCode\nlibrarian::shelf(\n  dplyr,\n  glue,\n  here,\n  tidyr\n)\n\n\n\n\nread in the WIN txt pipe-delimited file\nsource(here(\"R/getData.R\"))\ndf &lt;- getData(params$org_id)\n\n# Ensure the result value column is numeric (coerce if needed)\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# 1. Ensure the result values are numeric\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n# 2. Build a wide “presence” table per Location × Analyte\npresence_table &lt;- df %&gt;%\n  group_by(Monitoring.Location.ID, DEP.Analyte.Name) %&gt;%\n  summarise(\n    # 1 if any non-NA exists, else 0\n    presence = ifelse(any(!is.na(DEP.Result.Value.Number)), 1L, 0L),\n    .groups = \"drop\"\n  ) %&gt;%\n  pivot_wider(\n    names_from  = DEP.Analyte.Name,\n    values_from = presence,\n    values_fill = list(presence = 0L)\n  )\n\n# 3. Pivot back to long for ggplot\nheat_long &lt;- presence_table %&gt;%\n  pivot_longer(\n    cols      = -Monitoring.Location.ID,\n    names_to  = \"DEP.Analyte.Name\",\n    values_to = \"presence\"\n  )\n\n\n\n\nCode\n# 4. Draw the heatmap with a white→steelblue gradient\nggplot(heat_long,\n       aes(x = DEP.Analyte.Name,\n           y = Monitoring.Location.ID,\n           fill = presence)) +\n  geom_tile(color = \"grey90\") +\n  scale_fill_gradient(\n    low    = \"white\",\n    high   = \"steelblue\",\n    limits = c(0, 1),\n    breaks = c(0, 1),\n    labels = c(\"0 (none)\", \"1 (some)\")\n  ) +\n  labs(\n    x    = \"DEP Analyte Name\",\n    y    = \"Monitoring Location ID\",\n    fill = \"Presence\\n(0/1)\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    axis.text.x  = element_text(angle = 45, hjust = 1),\n    panel.grid   = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\ncreate map with unique points (no clustering)\nlibrary(leaflet)\nlibrary(dplyr)\n\n# 1. Filter out rows & keep only one per unique lat/lon\ndf_unique_locs &lt;- df %&gt;%\n  filter(!is.na(Org.Decimal.Latitude), !is.na(Org.Decimal.Longitude)) %&gt;%\n  distinct(Org.Decimal.Latitude, Org.Decimal.Longitude, .keep_all = TRUE)\n\n# 2. Plot all unique points (no clustering)\nleaflet(df_unique_locs) %&gt;%\n  addProviderTiles(providers$OpenStreetMap) %&gt;%\n  addCircleMarkers(\n    lng         = ~Org.Decimal.Longitude,\n    lat         = ~Org.Decimal.Latitude,\n    radius      = 4,\n    color       = \"blue\",\n    fillOpacity = 0.5,\n    popup       = ~paste0(\n      \"Monitoring Location: \", Monitoring.Location.ID\n    )\n    # clusterOptions removed to show every point at all zoom levels\n  )\n\n\n\n\n\n\n\n\nvisualize distribution of points through time\nlibrary(ggplot2)\nlibrary(lubridate)\n\n# Convert Activity.Start.Date.Time to proper datetime if it isn't already\ndf$`Activity.Start.Date.Time` &lt;- as.POSIXct(as.character(df$`Activity.Start.Date.Time`), format = \"%m/%d/%Y %H:%M:%S\")\n\n\n# Create a dataframe with unique sampling events\nsampling_events &lt;- df %&gt;%\n  distinct(`Activity.Start.Date.Time`, Monitoring.Location.ID) %&gt;%\n  arrange(`Activity.Start.Date.Time`)\n\n\n\n\nCreate time distribution plot\nggplot(sampling_events, aes(x = `Activity.Start.Date.Time`)) +\n  geom_histogram(bins = 30, fill = \"steelblue\", color = \"white\", alpha = 0.7) +\n  labs(\n    title = \"Distribution of Sampling Events Over Time\",\n    x = \"Date\",\n    y = \"Number of Sampling Events\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Create a heatmap of sampling locations over time\n# drop rows with missing dates or IDs\nsampling_events &lt;- sampling_events %&gt;%\n  filter(!is.na(`Activity.Start.Date.Time`), !is.na(Monitoring.Location.ID))\n# if sampling_events is empty, skip this plot\nif (nrow(sampling_events) &gt; 0) {\n  ggplot(sampling_events, \n          aes(x = `Activity.Start.Date.Time`, \n              y = Monitoring.Location.ID)) +\n      geom_point(color = \"steelblue\", alpha = 0.7) +\n      labs(\n        title = \"Sampling Locations Over Time\",\n        x = \"Date\",\n        y = \"Monitoring Location ID\"\n      ) +\n      theme_minimal() +\n      theme(\n        axis.text.x = element_text(angle = 45, hjust = 1),\n        panel.grid.minor = element_blank()\n      )\n} else {\n  print(\"No sampling events with valid dates & IDs\")\n}\n\n\n[1] \"No sampling events with valid dates & IDs\"\n\n\n\n\nCode\ndate_range &lt;- range(df$`Activity.Start.Date.Time`, na.rm = TRUE)\n  cat(\"Earliest sampling date: \", format(date_range[1], \"%Y-%m-%d %H:%M:%S\"), \"\\n\")\n\n\nEarliest sampling date:  Inf \n\n\nCode\n  cat(\"Latest   sampling date: \", format(date_range[2], \"%Y-%m-%d %H:%M:%S\"), \"\\n\")\n\n\nLatest   sampling date:  -Inf \n\n\n\nDownload Data For This Provider"
  },
  {
    "objectID": "provider_reports/provider_reports/DERM_BBWQ.html",
    "href": "provider_reports/provider_reports/DERM_BBWQ.html",
    "title": "DERM_BBWQ Data",
    "section": "",
    "text": "WQ Provider Data\n\n\nCode\nlibrarian::shelf(\n  dplyr,\n  glue,\n  here,\n  tidyr\n)\n\n\n\n\nread in the WIN txt pipe-delimited file\nsource(here(\"R/getData.R\"))\ndf &lt;- getData(params$org_id)\n\n# Ensure the result value column is numeric (coerce if needed)\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# 1. Ensure the result values are numeric\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n# 2. Build a wide “presence” table per Location × Analyte\npresence_table &lt;- df %&gt;%\n  group_by(Monitoring.Location.ID, DEP.Analyte.Name) %&gt;%\n  summarise(\n    # 1 if any non-NA exists, else 0\n    presence = ifelse(any(!is.na(DEP.Result.Value.Number)), 1L, 0L),\n    .groups = \"drop\"\n  ) %&gt;%\n  pivot_wider(\n    names_from  = DEP.Analyte.Name,\n    values_from = presence,\n    values_fill = list(presence = 0L)\n  )\n\n# 3. Pivot back to long for ggplot\nheat_long &lt;- presence_table %&gt;%\n  pivot_longer(\n    cols      = -Monitoring.Location.ID,\n    names_to  = \"DEP.Analyte.Name\",\n    values_to = \"presence\"\n  )\n\n\n\n\nCode\n# 4. Draw the heatmap with a white→steelblue gradient\nggplot(heat_long,\n       aes(x = DEP.Analyte.Name,\n           y = Monitoring.Location.ID,\n           fill = presence)) +\n  geom_tile(color = \"grey90\") +\n  scale_fill_gradient(\n    low    = \"white\",\n    high   = \"steelblue\",\n    limits = c(0, 1),\n    breaks = c(0, 1),\n    labels = c(\"0 (none)\", \"1 (some)\")\n  ) +\n  labs(\n    x    = \"DEP Analyte Name\",\n    y    = \"Monitoring Location ID\",\n    fill = \"Presence\\n(0/1)\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    axis.text.x  = element_text(angle = 45, hjust = 1),\n    panel.grid   = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\ncreate map with unique points (no clustering)\nlibrary(leaflet)\nlibrary(dplyr)\n\n# 1. Filter out rows & keep only one per unique lat/lon\ndf_unique_locs &lt;- df %&gt;%\n  filter(!is.na(Org.Decimal.Latitude), !is.na(Org.Decimal.Longitude)) %&gt;%\n  distinct(Org.Decimal.Latitude, Org.Decimal.Longitude, .keep_all = TRUE)\n\n# 2. Plot all unique points (no clustering)\nleaflet(df_unique_locs) %&gt;%\n  addProviderTiles(providers$OpenStreetMap) %&gt;%\n  addCircleMarkers(\n    lng         = ~Org.Decimal.Longitude,\n    lat         = ~Org.Decimal.Latitude,\n    radius      = 4,\n    color       = \"blue\",\n    fillOpacity = 0.5,\n    popup       = ~paste0(\n      \"Monitoring Location: \", Monitoring.Location.ID\n    )\n    # clusterOptions removed to show every point at all zoom levels\n  )\n\n\n\n\n\n\n\n\nvisualize distribution of points through time\nlibrary(ggplot2)\nlibrary(lubridate)\n\n# Convert Activity.Start.Date.Time to proper datetime if it isn't already\ndf$`Activity.Start.Date.Time` &lt;- as.POSIXct(as.character(df$`Activity.Start.Date.Time`), format = \"%m/%d/%Y %H:%M:%S\")\n\n\n# Create a dataframe with unique sampling events\nsampling_events &lt;- df %&gt;%\n  distinct(`Activity.Start.Date.Time`, Monitoring.Location.ID) %&gt;%\n  arrange(`Activity.Start.Date.Time`)\n\n\n\n\nCreate time distribution plot\nggplot(sampling_events, aes(x = `Activity.Start.Date.Time`)) +\n  geom_histogram(bins = 30, fill = \"steelblue\", color = \"white\", alpha = 0.7) +\n  labs(\n    title = \"Distribution of Sampling Events Over Time\",\n    x = \"Date\",\n    y = \"Number of Sampling Events\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Create a heatmap of sampling locations over time\n# drop rows with missing dates or IDs\nsampling_events &lt;- sampling_events %&gt;%\n  filter(!is.na(`Activity.Start.Date.Time`), !is.na(Monitoring.Location.ID))\n# if sampling_events is empty, skip this plot\nif (nrow(sampling_events) &gt; 0) {\n  ggplot(sampling_events, \n          aes(x = `Activity.Start.Date.Time`, \n              y = Monitoring.Location.ID)) +\n      geom_point(color = \"steelblue\", alpha = 0.7) +\n      labs(\n        title = \"Sampling Locations Over Time\",\n        x = \"Date\",\n        y = \"Monitoring Location ID\"\n      ) +\n      theme_minimal() +\n      theme(\n        axis.text.x = element_text(angle = 45, hjust = 1),\n        panel.grid.minor = element_blank()\n      )\n} else {\n  print(\"No sampling events with valid dates & IDs\")\n}\n\n\n[1] \"No sampling events with valid dates & IDs\"\n\n\n\n\nCode\ndate_range &lt;- range(df$`Activity.Start.Date.Time`, na.rm = TRUE)\n  cat(\"Earliest sampling date: \", format(date_range[1], \"%Y-%m-%d %H:%M:%S\"), \"\\n\")\n\n\nEarliest sampling date:  Inf \n\n\nCode\n  cat(\"Latest   sampling date: \", format(date_range[2], \"%Y-%m-%d %H:%M:%S\"), \"\\n\")\n\n\nLatest   sampling date:  -Inf \n\n\n\nDownload Data For This Provider"
  },
  {
    "objectID": "provider_reports/provider_reports/BROWARD.html",
    "href": "provider_reports/provider_reports/BROWARD.html",
    "title": "BROWARD Data",
    "section": "",
    "text": "WQ Provider Data\n\n\nCode\nlibrarian::shelf(\n  dplyr,\n  glue,\n  here,\n  tidyr\n)\n\n\n\n\nread in the WIN txt pipe-delimited file\nsource(here(\"R/getData.R\"))\ndf &lt;- getData(params$org_id)\n\n# Ensure the result value column is numeric (coerce if needed)\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# 1. Ensure the result values are numeric\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n# 2. Build a wide “presence” table per Location × Analyte\npresence_table &lt;- df %&gt;%\n  group_by(Monitoring.Location.ID, DEP.Analyte.Name) %&gt;%\n  summarise(\n    # 1 if any non-NA exists, else 0\n    presence = ifelse(any(!is.na(DEP.Result.Value.Number)), 1L, 0L),\n    .groups = \"drop\"\n  ) %&gt;%\n  pivot_wider(\n    names_from  = DEP.Analyte.Name,\n    values_from = presence,\n    values_fill = list(presence = 0L)\n  )\n\n# 3. Pivot back to long for ggplot\nheat_long &lt;- presence_table %&gt;%\n  pivot_longer(\n    cols      = -Monitoring.Location.ID,\n    names_to  = \"DEP.Analyte.Name\",\n    values_to = \"presence\"\n  )\n\n\n\n\nCode\n# 4. Draw the heatmap with a white→steelblue gradient\nggplot(heat_long,\n       aes(x = DEP.Analyte.Name,\n           y = Monitoring.Location.ID,\n           fill = presence)) +\n  geom_tile(color = \"grey90\") +\n  scale_fill_gradient(\n    low    = \"white\",\n    high   = \"steelblue\",\n    limits = c(0, 1),\n    breaks = c(0, 1),\n    labels = c(\"0 (none)\", \"1 (some)\")\n  ) +\n  labs(\n    x    = \"DEP Analyte Name\",\n    y    = \"Monitoring Location ID\",\n    fill = \"Presence\\n(0/1)\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    axis.text.x  = element_text(angle = 45, hjust = 1),\n    panel.grid   = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\ncreate map with unique points (no clustering)\nlibrary(leaflet)\nlibrary(dplyr)\n\n# 1. Filter out rows & keep only one per unique lat/lon\ndf_unique_locs &lt;- df %&gt;%\n  filter(!is.na(Org.Decimal.Latitude), !is.na(Org.Decimal.Longitude)) %&gt;%\n  distinct(Org.Decimal.Latitude, Org.Decimal.Longitude, .keep_all = TRUE)\n\n# 2. Plot all unique points (no clustering)\nleaflet(df_unique_locs) %&gt;%\n  addProviderTiles(providers$OpenStreetMap) %&gt;%\n  addCircleMarkers(\n    lng         = ~Org.Decimal.Longitude,\n    lat         = ~Org.Decimal.Latitude,\n    radius      = 4,\n    color       = \"blue\",\n    fillOpacity = 0.5,\n    popup       = ~paste0(\n      \"Monitoring Location: \", Monitoring.Location.ID\n    )\n    # clusterOptions removed to show every point at all zoom levels\n  )\n\n\n\n\n\n\n\n\nvisualize distribution of points through time\nlibrary(ggplot2)\nlibrary(lubridate)\n\n# Convert Activity.Start.Date.Time to proper datetime if it isn't already\ndf$`Activity.Start.Date.Time` &lt;- as.POSIXct(as.character(df$`Activity.Start.Date.Time`), format = \"%m/%d/%Y %H:%M:%S\")\n\n\n# Create a dataframe with unique sampling events\nsampling_events &lt;- df %&gt;%\n  distinct(`Activity.Start.Date.Time`, Monitoring.Location.ID) %&gt;%\n  arrange(`Activity.Start.Date.Time`)\n\n\n\n\nCreate time distribution plot\nggplot(sampling_events, aes(x = `Activity.Start.Date.Time`)) +\n  geom_histogram(bins = 30, fill = \"steelblue\", color = \"white\", alpha = 0.7) +\n  labs(\n    title = \"Distribution of Sampling Events Over Time\",\n    x = \"Date\",\n    y = \"Number of Sampling Events\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Create a heatmap of sampling locations over time\n# drop rows with missing dates or IDs\nsampling_events &lt;- sampling_events %&gt;%\n  filter(!is.na(`Activity.Start.Date.Time`), !is.na(Monitoring.Location.ID))\n# if sampling_events is empty, skip this plot\nif (nrow(sampling_events) &gt; 0) {\n  ggplot(sampling_events, \n          aes(x = `Activity.Start.Date.Time`, \n              y = Monitoring.Location.ID)) +\n      geom_point(color = \"steelblue\", alpha = 0.7) +\n      labs(\n        title = \"Sampling Locations Over Time\",\n        x = \"Date\",\n        y = \"Monitoring Location ID\"\n      ) +\n      theme_minimal() +\n      theme(\n        axis.text.x = element_text(angle = 45, hjust = 1),\n        panel.grid.minor = element_blank()\n      )\n} else {\n  print(\"No sampling events with valid dates & IDs\")\n}\n\n\n[1] \"No sampling events with valid dates & IDs\"\n\n\n\n\nCode\ndate_range &lt;- range(df$`Activity.Start.Date.Time`, na.rm = TRUE)\n  cat(\"Earliest sampling date: \", format(date_range[1], \"%Y-%m-%d %H:%M:%S\"), \"\\n\")\n\n\nEarliest sampling date:  Inf \n\n\nCode\n  cat(\"Latest   sampling date: \", format(date_range[2], \"%Y-%m-%d %H:%M:%S\"), \"\\n\")\n\n\nLatest   sampling date:  -Inf \n\n\n\nDownload Data For This Provider"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "WIN_data_ingest",
    "section": "",
    "text": "Data ingestion and initial analysis from FL WIN water quality database and other sources.\nBelow is a demonstration of how to load the data.\nFor more information about the data please see “Provider Reports” in the top navigation.\n\n\nread in the WIN txt pipe-delimited file for example program.\nlibrarian::shelf(\n  dplyr,\n  glue,\n  here,\n  tidyr\n)\n\nsource(\"R/getData.R\")\ndf &lt;- getData(\"BBAP\")\n\n\n\n\nPrint the first few rows of the dataframe\n# head(df)\n\nlibrary(pander)\n\npander(head(df), digits = 6)\n\n\n\nTable continues below\n\n\n\n\n\n\n\nOrganization.ID\nMonitoring.Location.ID\nOrg.Decimal.Latitude\n\n\n\n\n21FLBBAP\nWQ04\n25.826\n\n\n21FLBBAP\nWQ02\n25.8533\n\n\n21FLBBAP\nWQ02\n25.8533\n\n\n21FLBBAP\nWQ04\n25.826\n\n\n21FLBBAP\nWQ04\n25.826\n\n\n21FLBBAP\nWQ04\n25.826\n\n\n\n\nTable continues below\n\n\n\n\n\n\nOrg.Latitude..DD.MM.SS.SSSS.\nOrg.Decimal.Longitude\n\n\n\n\nNA\n-80.1341\n\n\nNA\n-80.1455\n\n\nNA\n-80.1455\n\n\nNA\n-80.1341\n\n\nNA\n-80.1341\n\n\nNA\n-80.1341\n\n\n\n\nTable continues below\n\n\n\n\n\n\n\n\nOrg.Longitude..DD.MM.SS.SSSS.\nWBID\nActivity.ID\nActivity.Type\n\n\n\n\nNA\n3226H6\nWQ04-04/06/20\nSample\n\n\nNA\n3226H5\nWQ02-05/05/20\nSample\n\n\nNA\n3226H5\nWQ02-05/05/20\nSample\n\n\nNA\n3226H6\nWQ04-04/06/20\nSample\n\n\nNA\n3226H6\nWQ04-04/06/20\nSample\n\n\nNA\n3226H6\nWQ04-04/06/20\nSample\n\n\n\n\nTable continues below\n\n\n\n\n\n\n\nActivity.Start.Date.Time\nMatrix\nSample.Collection.Type\n\n\n\n\n2020-04-06 12:35:00\nAQUEOUS-Surface Water\nDirect Grab\n\n\n2020-05-05 15:00:00\nAQUEOUS-Surface Water\nDirect Grab\n\n\n2020-05-05 15:00:00\nAQUEOUS-Surface Water\nDirect Grab\n\n\n2020-04-06 12:35:00\nAQUEOUS-Surface Water\nDirect Grab\n\n\n2020-04-06 12:35:00\nAQUEOUS-Surface Water\nDirect Grab\n\n\n2020-04-06 12:35:00\nAQUEOUS-Surface Water\nDirect Grab\n\n\n\n\nTable continues below\n\n\n\n\n\n\n\nSampling.Agency.Name\nActivity.Depth\nActivity.Depth.Unit\n\n\n\n\nFDEP BISCAYNE BAY AQUATIC PRESERVES\n1.691\nm\n\n\nFDEP BISCAYNE BAY AQUATIC PRESERVES\n1.676\nm\n\n\nFDEP BISCAYNE BAY AQUATIC PRESERVES\n1.676\nm\n\n\nFDEP BISCAYNE BAY AQUATIC PRESERVES\n1.691\nm\n\n\nFDEP BISCAYNE BAY AQUATIC PRESERVES\n1.691\nm\n\n\nFDEP BISCAYNE BAY AQUATIC PRESERVES\n1.691\nm\n\n\n\n\nTable continues below\n\n\n\n\n\n\n\nActivity.Top.Depth\nActivity.Bottom.Depth\nActivity.Depth.Top.Bottom.Unit\n\n\n\n\nNA\nNA\nNA\n\n\nNA\nNA\nNA\n\n\nNA\nNA\nNA\n\n\nNA\nNA\nNA\n\n\nNA\nNA\nNA\n\n\nNA\nNA\nNA\n\n\n\n\nTable continues below\n\n\n\n\n\n\n\nDEP.Result.ID\nDEP.Analyte.Name\nDEP.Result.Value.Number\n\n\n\n\n7190664\nNitrate-Nitrite (N)\n0.007\n\n\n7187465\nNitrogen- Total Kjeldahl\n0.28\n\n\n7186300\nPhosphorus- Total\n0.01\n\n\n7190134\nPhosphorus- Total\n0.011\n\n\n7190741\nAmmonia (N)\n0.01\n\n\n7189987\nNitrogen- Total Kjeldahl\n0.26\n\n\n\n\nTable continues below\n\n\n\n\n\n\n\n\n\nDEP.Result.Value.Text\nDEP.Result.Unit\nDEP.MDL\nDEP.PQL\nValue.Qualifier\n\n\n\n\n\nmg/L\n0.004\n0.01\nI\n\n\n\nmg/L\n0.16\n0.4\nI\n\n\n\nmg/L\n0.004\n0.01\n\n\n\n\nmg/L\n0.004\n0.01\n\n\n\n\nmg/L\n0.002\n0.005\n\n\n\n\nmg/L\n0.16\n0.4\nI\n\n\n\n\n\n\n\n\n\n\n\n\nSample.Fraction\nLab.ID\nResult.Comments\nAudit.Censored.Decisions\n\n\n\n\nTotal\nE31780\n\nNA\n\n\nTotal\nE31780\n\nNA\n\n\nTotal\nE31780\n\nNA\n\n\nTotal\nE31780\n\nNA\n\n\nTotal\nE31780\n\nNA\n\n\nTotal\nE31780\n\nNA\n\n\n\n\n\n\nIf you have visualization ideas for this data, please open a github issue here."
  },
  {
    "objectID": "provider_reports/provider_reports.html",
    "href": "provider_reports/provider_reports.html",
    "title": "Provider Reports",
    "section": "",
    "text": "BBAP Data\n\n\n\n\n\n\nTylar Murray\n\n\n\n\n\n\n\n\n\n\n\n\nBROWARD Data\n\n\n\n\n\n\nTylar Murray\n\n\n\n\n\n\n\n\n\n\n\n\nDEP Data\n\n\n\n\n\n\nTylar Murray\n\n\n\n\n\n\n\n\n\n\n\n\nDERM_BBWQ Data\n\n\n\n\n\n\nTylar Murray\n\n\n\n\n\n\n\n\n\n\n\n\nFIU_WQMP Data\n\n\n\n\n\n\nTylar Murray\n\n\n\n\n\n\n\n\n\n\n\n\nPALMBEACH Data\n\n\n\n\n\n\nTylar Murray\n\n\n\n\n\n\n\n\n\n\n\n\nSFER Data\n\n\n\n\n\n\nTylar Murray\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "test",
    "section": "",
    "text": "Code\nlibrary(leaflet)\nlibrary(RColorBrewer)\n\n# Load the data\ndata &lt;- read.csv(\"data/Report_stations_table.csv\")\n\n# Recode Code → a factor with descriptive labels\ndata$Code &lt;- factor(\n  data$Code,\n  levels = c(1, 2, 3),\n  labels = c(\"precipitation\", \"buoy data\", \"discharge\")\n)\n\n# Build a color function off that factor\npal &lt;- colorFactor(\n  palette = \"Set1\",\n  domain  = data$Code\n)\n\nleaflet(data) %&gt;%\n  addProviderTiles(providers$USGS.USTopo) %&gt;%\n  addCircleMarkers(\n    lng         = ~Lon,\n    lat         = ~Lat,\n    label       = ~ID,                    # Hover shows ID\n    radius      = 5,\n    color       = \"black\",\n    fillColor   = ~pal(Code),\n    fillOpacity = 0.7,\n    popup       = ~paste(\"&lt;b&gt;Station ID:&lt;/b&gt;\", ID)\n  ) %&gt;%\n  addLegend(\n    position = \"bottomright\",\n    pal      = pal,\n    values   = ~Code,\n    title    = \"Data Type\"\n  )"
  },
  {
    "objectID": "provider_reports/provider_reports/BBAP.html",
    "href": "provider_reports/provider_reports/BBAP.html",
    "title": "BBAP Data",
    "section": "",
    "text": "WQ Provider Data\n\n\nCode\nlibrarian::shelf(\n  dplyr,\n  glue,\n  here,\n  tidyr\n)\n\n\n\n\nread in the WIN txt pipe-delimited file\nsource(here(\"R/getData.R\"))\ndf &lt;- getData(params$org_id)\n\n# Ensure the result value column is numeric (coerce if needed)\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# 1. Ensure the result values are numeric\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n# 2. Build a wide “presence” table per Location × Analyte\npresence_table &lt;- df %&gt;%\n  group_by(Monitoring.Location.ID, DEP.Analyte.Name) %&gt;%\n  summarise(\n    # 1 if any non-NA exists, else 0\n    presence = ifelse(any(!is.na(DEP.Result.Value.Number)), 1L, 0L),\n    .groups = \"drop\"\n  ) %&gt;%\n  pivot_wider(\n    names_from  = DEP.Analyte.Name,\n    values_from = presence,\n    values_fill = list(presence = 0L)\n  )\n\n# 3. Pivot back to long for ggplot\nheat_long &lt;- presence_table %&gt;%\n  pivot_longer(\n    cols      = -Monitoring.Location.ID,\n    names_to  = \"DEP.Analyte.Name\",\n    values_to = \"presence\"\n  )\n\n\n\n\nCode\n# 4. Draw the heatmap with a white→steelblue gradient\nggplot(heat_long,\n       aes(x = DEP.Analyte.Name,\n           y = Monitoring.Location.ID,\n           fill = presence)) +\n  geom_tile(color = \"grey90\") +\n  scale_fill_gradient(\n    low    = \"white\",\n    high   = \"steelblue\",\n    limits = c(0, 1),\n    breaks = c(0, 1),\n    labels = c(\"0 (none)\", \"1 (some)\")\n  ) +\n  labs(\n    x    = \"DEP Analyte Name\",\n    y    = \"Monitoring Location ID\",\n    fill = \"Presence\\n(0/1)\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    axis.text.x  = element_text(angle = 45, hjust = 1),\n    panel.grid   = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\ncreate map with unique points (no clustering)\nlibrary(leaflet)\nlibrary(dplyr)\n\n# 1. Filter out rows & keep only one per unique lat/lon\ndf_unique_locs &lt;- df %&gt;%\n  filter(!is.na(Org.Decimal.Latitude), !is.na(Org.Decimal.Longitude)) %&gt;%\n  distinct(Org.Decimal.Latitude, Org.Decimal.Longitude, .keep_all = TRUE)\n\n# 2. Plot all unique points (no clustering)\nleaflet(df_unique_locs) %&gt;%\n  addProviderTiles(providers$OpenStreetMap) %&gt;%\n  addCircleMarkers(\n    lng         = ~Org.Decimal.Longitude,\n    lat         = ~Org.Decimal.Latitude,\n    radius      = 4,\n    color       = \"blue\",\n    fillOpacity = 0.5,\n    popup       = ~paste0(\n      \"Monitoring Location: \", Monitoring.Location.ID\n    )\n    # clusterOptions removed to show every point at all zoom levels\n  )\n\n\n\n\n\n\n\n\nvisualize distribution of points through time\nlibrary(ggplot2)\nlibrary(lubridate)\n\n# Convert Activity.Start.Date.Time to proper datetime if it isn't already\ndf$`Activity.Start.Date.Time` &lt;- as.POSIXct(as.character(df$`Activity.Start.Date.Time`), format = \"%m/%d/%Y %H:%M:%S\")\n\n\n# Create a dataframe with unique sampling events\nsampling_events &lt;- df %&gt;%\n  distinct(`Activity.Start.Date.Time`, Monitoring.Location.ID) %&gt;%\n  arrange(`Activity.Start.Date.Time`)\n\n\n\n\nCreate time distribution plot\nggplot(sampling_events, aes(x = `Activity.Start.Date.Time`)) +\n  geom_histogram(bins = 30, fill = \"steelblue\", color = \"white\", alpha = 0.7) +\n  labs(\n    title = \"Distribution of Sampling Events Over Time\",\n    x = \"Date\",\n    y = \"Number of Sampling Events\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Create a heatmap of sampling locations over time\n# drop rows with missing dates or IDs\nsampling_events &lt;- sampling_events %&gt;%\n  filter(!is.na(`Activity.Start.Date.Time`), !is.na(Monitoring.Location.ID))\n# if sampling_events is empty, skip this plot\nif (nrow(sampling_events) &gt; 0) {\n  ggplot(sampling_events, \n          aes(x = `Activity.Start.Date.Time`, \n              y = Monitoring.Location.ID)) +\n      geom_point(color = \"steelblue\", alpha = 0.7) +\n      labs(\n        title = \"Sampling Locations Over Time\",\n        x = \"Date\",\n        y = \"Monitoring Location ID\"\n      ) +\n      theme_minimal() +\n      theme(\n        axis.text.x = element_text(angle = 45, hjust = 1),\n        panel.grid.minor = element_blank()\n      )\n} else {\n  print(\"No sampling events with valid dates & IDs\")\n}\n\n\n[1] \"No sampling events with valid dates & IDs\"\n\n\n\n\nCode\ndate_range &lt;- range(df$`Activity.Start.Date.Time`, na.rm = TRUE)\n  cat(\"Earliest sampling date: \", format(date_range[1], \"%Y-%m-%d %H:%M:%S\"), \"\\n\")\n\n\nEarliest sampling date:  Inf \n\n\nCode\n  cat(\"Latest   sampling date: \", format(date_range[2], \"%Y-%m-%d %H:%M:%S\"), \"\\n\")\n\n\nLatest   sampling date:  -Inf \n\n\n\nDownload Data For This Provider"
  },
  {
    "objectID": "provider_reports/provider_reports/DEP.html",
    "href": "provider_reports/provider_reports/DEP.html",
    "title": "DEP Data",
    "section": "",
    "text": "WQ Provider Data\n\n\nCode\nlibrarian::shelf(\n  dplyr,\n  glue,\n  here,\n  tidyr\n)\n\n\n\n\nread in the WIN txt pipe-delimited file\nsource(here(\"R/getData.R\"))\ndf &lt;- getData(params$org_id)\n\n# Ensure the result value column is numeric (coerce if needed)\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# 1. Ensure the result values are numeric\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n# 2. Build a wide “presence” table per Location × Analyte\npresence_table &lt;- df %&gt;%\n  group_by(Monitoring.Location.ID, DEP.Analyte.Name) %&gt;%\n  summarise(\n    # 1 if any non-NA exists, else 0\n    presence = ifelse(any(!is.na(DEP.Result.Value.Number)), 1L, 0L),\n    .groups = \"drop\"\n  ) %&gt;%\n  pivot_wider(\n    names_from  = DEP.Analyte.Name,\n    values_from = presence,\n    values_fill = list(presence = 0L)\n  )\n\n# 3. Pivot back to long for ggplot\nheat_long &lt;- presence_table %&gt;%\n  pivot_longer(\n    cols      = -Monitoring.Location.ID,\n    names_to  = \"DEP.Analyte.Name\",\n    values_to = \"presence\"\n  )\n\n\n\n\nCode\n# 4. Draw the heatmap with a white→steelblue gradient\nggplot(heat_long,\n       aes(x = DEP.Analyte.Name,\n           y = Monitoring.Location.ID,\n           fill = presence)) +\n  geom_tile(color = \"grey90\") +\n  scale_fill_gradient(\n    low    = \"white\",\n    high   = \"steelblue\",\n    limits = c(0, 1),\n    breaks = c(0, 1),\n    labels = c(\"0 (none)\", \"1 (some)\")\n  ) +\n  labs(\n    x    = \"DEP Analyte Name\",\n    y    = \"Monitoring Location ID\",\n    fill = \"Presence\\n(0/1)\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    axis.text.x  = element_text(angle = 45, hjust = 1),\n    panel.grid   = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\ncreate map with unique points (no clustering)\nlibrary(leaflet)\nlibrary(dplyr)\n\n# 1. Filter out rows & keep only one per unique lat/lon\ndf_unique_locs &lt;- df %&gt;%\n  filter(!is.na(Org.Decimal.Latitude), !is.na(Org.Decimal.Longitude)) %&gt;%\n  distinct(Org.Decimal.Latitude, Org.Decimal.Longitude, .keep_all = TRUE)\n\n# 2. Plot all unique points (no clustering)\nleaflet(df_unique_locs) %&gt;%\n  addProviderTiles(providers$OpenStreetMap) %&gt;%\n  addCircleMarkers(\n    lng         = ~Org.Decimal.Longitude,\n    lat         = ~Org.Decimal.Latitude,\n    radius      = 4,\n    color       = \"blue\",\n    fillOpacity = 0.5,\n    popup       = ~paste0(\n      \"Monitoring Location: \", Monitoring.Location.ID\n    )\n    # clusterOptions removed to show every point at all zoom levels\n  )\n\n\n\n\n\n\n\n\nvisualize distribution of points through time\nlibrary(ggplot2)\nlibrary(lubridate)\n\n# Convert Activity.Start.Date.Time to proper datetime if it isn't already\ndf$`Activity.Start.Date.Time` &lt;- as.POSIXct(as.character(df$`Activity.Start.Date.Time`), format = \"%m/%d/%Y %H:%M:%S\")\n\n\n# Create a dataframe with unique sampling events\nsampling_events &lt;- df %&gt;%\n  distinct(`Activity.Start.Date.Time`, Monitoring.Location.ID) %&gt;%\n  arrange(`Activity.Start.Date.Time`)\n\n\n\n\nCreate time distribution plot\nggplot(sampling_events, aes(x = `Activity.Start.Date.Time`)) +\n  geom_histogram(bins = 30, fill = \"steelblue\", color = \"white\", alpha = 0.7) +\n  labs(\n    title = \"Distribution of Sampling Events Over Time\",\n    x = \"Date\",\n    y = \"Number of Sampling Events\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Create a heatmap of sampling locations over time\n# drop rows with missing dates or IDs\nsampling_events &lt;- sampling_events %&gt;%\n  filter(!is.na(`Activity.Start.Date.Time`), !is.na(Monitoring.Location.ID))\n# if sampling_events is empty, skip this plot\nif (nrow(sampling_events) &gt; 0) {\n  ggplot(sampling_events, \n          aes(x = `Activity.Start.Date.Time`, \n              y = Monitoring.Location.ID)) +\n      geom_point(color = \"steelblue\", alpha = 0.7) +\n      labs(\n        title = \"Sampling Locations Over Time\",\n        x = \"Date\",\n        y = \"Monitoring Location ID\"\n      ) +\n      theme_minimal() +\n      theme(\n        axis.text.x = element_text(angle = 45, hjust = 1),\n        panel.grid.minor = element_blank()\n      )\n} else {\n  print(\"No sampling events with valid dates & IDs\")\n}\n\n\n[1] \"No sampling events with valid dates & IDs\"\n\n\n\n\nCode\ndate_range &lt;- range(df$`Activity.Start.Date.Time`, na.rm = TRUE)\n  cat(\"Earliest sampling date: \", format(date_range[1], \"%Y-%m-%d %H:%M:%S\"), \"\\n\")\n\n\nEarliest sampling date:  Inf \n\n\nCode\n  cat(\"Latest   sampling date: \", format(date_range[2], \"%Y-%m-%d %H:%M:%S\"), \"\\n\")\n\n\nLatest   sampling date:  -Inf \n\n\n\nDownload Data For This Provider"
  },
  {
    "objectID": "provider_reports/provider_reports/FIU_WQMP.html",
    "href": "provider_reports/provider_reports/FIU_WQMP.html",
    "title": "FIU_WQMP Data",
    "section": "",
    "text": "WQ Provider Data\n\n\nCode\nlibrarian::shelf(\n  dplyr,\n  glue,\n  here,\n  tidyr\n)\n\n\n\n\nread in the WIN txt pipe-delimited file\nsource(here(\"R/getData.R\"))\ndf &lt;- getData(params$org_id)\n\n# Ensure the result value column is numeric (coerce if needed)\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# 1. Ensure the result values are numeric\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n# 2. Build a wide “presence” table per Location × Analyte\npresence_table &lt;- df %&gt;%\n  group_by(Monitoring.Location.ID, DEP.Analyte.Name) %&gt;%\n  summarise(\n    # 1 if any non-NA exists, else 0\n    presence = ifelse(any(!is.na(DEP.Result.Value.Number)), 1L, 0L),\n    .groups = \"drop\"\n  ) %&gt;%\n  pivot_wider(\n    names_from  = DEP.Analyte.Name,\n    values_from = presence,\n    values_fill = list(presence = 0L)\n  )\n\n# 3. Pivot back to long for ggplot\nheat_long &lt;- presence_table %&gt;%\n  pivot_longer(\n    cols      = -Monitoring.Location.ID,\n    names_to  = \"DEP.Analyte.Name\",\n    values_to = \"presence\"\n  )\n\n\n\n\nCode\n# 4. Draw the heatmap with a white→steelblue gradient\nggplot(heat_long,\n       aes(x = DEP.Analyte.Name,\n           y = Monitoring.Location.ID,\n           fill = presence)) +\n  geom_tile(color = \"grey90\") +\n  scale_fill_gradient(\n    low    = \"white\",\n    high   = \"steelblue\",\n    limits = c(0, 1),\n    breaks = c(0, 1),\n    labels = c(\"0 (none)\", \"1 (some)\")\n  ) +\n  labs(\n    x    = \"DEP Analyte Name\",\n    y    = \"Monitoring Location ID\",\n    fill = \"Presence\\n(0/1)\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    axis.text.x  = element_text(angle = 45, hjust = 1),\n    panel.grid   = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\ncreate map with unique points (no clustering)\nlibrary(leaflet)\nlibrary(dplyr)\n\n# 1. Filter out rows & keep only one per unique lat/lon\ndf_unique_locs &lt;- df %&gt;%\n  filter(!is.na(Org.Decimal.Latitude), !is.na(Org.Decimal.Longitude)) %&gt;%\n  distinct(Org.Decimal.Latitude, Org.Decimal.Longitude, .keep_all = TRUE)\n\n# 2. Plot all unique points (no clustering)\nleaflet(df_unique_locs) %&gt;%\n  addProviderTiles(providers$OpenStreetMap) %&gt;%\n  addCircleMarkers(\n    lng         = ~Org.Decimal.Longitude,\n    lat         = ~Org.Decimal.Latitude,\n    radius      = 4,\n    color       = \"blue\",\n    fillOpacity = 0.5,\n    popup       = ~paste0(\n      \"Monitoring Location: \", Monitoring.Location.ID\n    )\n    # clusterOptions removed to show every point at all zoom levels\n  )\n\n\n\n\n\n\n\n\nvisualize distribution of points through time\nlibrary(ggplot2)\nlibrary(lubridate)\n\n# Convert Activity.Start.Date.Time to proper datetime if it isn't already\ndf$`Activity.Start.Date.Time` &lt;- as.POSIXct(as.character(df$`Activity.Start.Date.Time`), format = \"%m/%d/%Y %H:%M:%S\")\n\n\n# Create a dataframe with unique sampling events\nsampling_events &lt;- df %&gt;%\n  distinct(`Activity.Start.Date.Time`, Monitoring.Location.ID) %&gt;%\n  arrange(`Activity.Start.Date.Time`)\n\n\n\n\nCreate time distribution plot\nggplot(sampling_events, aes(x = `Activity.Start.Date.Time`)) +\n  geom_histogram(bins = 30, fill = \"steelblue\", color = \"white\", alpha = 0.7) +\n  labs(\n    title = \"Distribution of Sampling Events Over Time\",\n    x = \"Date\",\n    y = \"Number of Sampling Events\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Create a heatmap of sampling locations over time\n# drop rows with missing dates or IDs\nsampling_events &lt;- sampling_events %&gt;%\n  filter(!is.na(`Activity.Start.Date.Time`), !is.na(Monitoring.Location.ID))\n# if sampling_events is empty, skip this plot\nif (nrow(sampling_events) &gt; 0) {\n  ggplot(sampling_events, \n          aes(x = `Activity.Start.Date.Time`, \n              y = Monitoring.Location.ID)) +\n      geom_point(color = \"steelblue\", alpha = 0.7) +\n      labs(\n        title = \"Sampling Locations Over Time\",\n        x = \"Date\",\n        y = \"Monitoring Location ID\"\n      ) +\n      theme_minimal() +\n      theme(\n        axis.text.x = element_text(angle = 45, hjust = 1),\n        panel.grid.minor = element_blank()\n      )\n} else {\n  print(\"No sampling events with valid dates & IDs\")\n}\n\n\n[1] \"No sampling events with valid dates & IDs\"\n\n\n\n\nCode\ndate_range &lt;- range(df$`Activity.Start.Date.Time`, na.rm = TRUE)\n  cat(\"Earliest sampling date: \", format(date_range[1], \"%Y-%m-%d %H:%M:%S\"), \"\\n\")\n\n\nEarliest sampling date:  Inf \n\n\nCode\n  cat(\"Latest   sampling date: \", format(date_range[2], \"%Y-%m-%d %H:%M:%S\"), \"\\n\")\n\n\nLatest   sampling date:  -Inf \n\n\n\nDownload Data For This Provider"
  },
  {
    "objectID": "provider_reports/provider_reports/SFER.html",
    "href": "provider_reports/provider_reports/SFER.html",
    "title": "SFER Data",
    "section": "",
    "text": "WQ Provider Data\n\n\nCode\nlibrarian::shelf(\n  dplyr,\n  glue,\n  here,\n  tidyr\n)\n\n\n\n\nread in the WIN txt pipe-delimited file\nsource(here(\"R/getData.R\"))\ndf &lt;- getData(params$org_id)\n\n# Ensure the result value column is numeric (coerce if needed)\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# 1. Ensure the result values are numeric\ndf$DEP.Result.Value.Number &lt;- as.numeric(df$DEP.Result.Value.Number)\n\n# 2. Build a wide “presence” table per Location × Analyte\npresence_table &lt;- df %&gt;%\n  group_by(Monitoring.Location.ID, DEP.Analyte.Name) %&gt;%\n  summarise(\n    # 1 if any non-NA exists, else 0\n    presence = ifelse(any(!is.na(DEP.Result.Value.Number)), 1L, 0L),\n    .groups = \"drop\"\n  ) %&gt;%\n  pivot_wider(\n    names_from  = DEP.Analyte.Name,\n    values_from = presence,\n    values_fill = list(presence = 0L)\n  )\n\n# 3. Pivot back to long for ggplot\nheat_long &lt;- presence_table %&gt;%\n  pivot_longer(\n    cols      = -Monitoring.Location.ID,\n    names_to  = \"DEP.Analyte.Name\",\n    values_to = \"presence\"\n  )\n\n\n\n\nCode\n# 4. Draw the heatmap with a white→steelblue gradient\nggplot(heat_long,\n       aes(x = DEP.Analyte.Name,\n           y = Monitoring.Location.ID,\n           fill = presence)) +\n  geom_tile(color = \"grey90\") +\n  scale_fill_gradient(\n    low    = \"white\",\n    high   = \"steelblue\",\n    limits = c(0, 1),\n    breaks = c(0, 1),\n    labels = c(\"0 (none)\", \"1 (some)\")\n  ) +\n  labs(\n    x    = \"DEP Analyte Name\",\n    y    = \"Monitoring Location ID\",\n    fill = \"Presence\\n(0/1)\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    axis.text.x  = element_text(angle = 45, hjust = 1),\n    panel.grid   = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\ncreate map with unique points (no clustering)\nlibrary(leaflet)\nlibrary(dplyr)\n\n# 1. Filter out rows & keep only one per unique lat/lon\ndf_unique_locs &lt;- df %&gt;%\n  filter(!is.na(Org.Decimal.Latitude), !is.na(Org.Decimal.Longitude)) %&gt;%\n  distinct(Org.Decimal.Latitude, Org.Decimal.Longitude, .keep_all = TRUE)\n\n# 2. Plot all unique points (no clustering)\nleaflet(df_unique_locs) %&gt;%\n  addProviderTiles(providers$OpenStreetMap) %&gt;%\n  addCircleMarkers(\n    lng         = ~Org.Decimal.Longitude,\n    lat         = ~Org.Decimal.Latitude,\n    radius      = 4,\n    color       = \"blue\",\n    fillOpacity = 0.5,\n    popup       = ~paste0(\n      \"Monitoring Location: \", Monitoring.Location.ID\n    )\n    # clusterOptions removed to show every point at all zoom levels\n  )\n\n\n\n\n\n\n\n\nvisualize distribution of points through time\nlibrary(ggplot2)\nlibrary(lubridate)\n\n# Convert Activity.Start.Date.Time to proper datetime if it isn't already\ndf$`Activity.Start.Date.Time` &lt;- as.POSIXct(as.character(df$`Activity.Start.Date.Time`), format = \"%m/%d/%Y %H:%M:%S\")\n\n\n# Create a dataframe with unique sampling events\nsampling_events &lt;- df %&gt;%\n  distinct(`Activity.Start.Date.Time`, Monitoring.Location.ID) %&gt;%\n  arrange(`Activity.Start.Date.Time`)\n\n\n\n\nCreate time distribution plot\nggplot(sampling_events, aes(x = `Activity.Start.Date.Time`)) +\n  geom_histogram(bins = 30, fill = \"steelblue\", color = \"white\", alpha = 0.7) +\n  labs(\n    title = \"Distribution of Sampling Events Over Time\",\n    x = \"Date\",\n    y = \"Number of Sampling Events\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.minor = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Create a heatmap of sampling locations over time\n# drop rows with missing dates or IDs\nsampling_events &lt;- sampling_events %&gt;%\n  filter(!is.na(`Activity.Start.Date.Time`), !is.na(Monitoring.Location.ID))\n# if sampling_events is empty, skip this plot\nif (nrow(sampling_events) &gt; 0) {\n  ggplot(sampling_events, \n          aes(x = `Activity.Start.Date.Time`, \n              y = Monitoring.Location.ID)) +\n      geom_point(color = \"steelblue\", alpha = 0.7) +\n      labs(\n        title = \"Sampling Locations Over Time\",\n        x = \"Date\",\n        y = \"Monitoring Location ID\"\n      ) +\n      theme_minimal() +\n      theme(\n        axis.text.x = element_text(angle = 45, hjust = 1),\n        panel.grid.minor = element_blank()\n      )\n} else {\n  print(\"No sampling events with valid dates & IDs\")\n}\n\n\n\n\n\n\n\n\n\n\n\nCode\ndate_range &lt;- range(df$`Activity.Start.Date.Time`, na.rm = TRUE)\n  cat(\"Earliest sampling date: \", format(date_range[1], \"%Y-%m-%d %H:%M:%S\"), \"\\n\")\n\n\nEarliest sampling date:  2014-12-01 13:23:00 \n\n\nCode\n  cat(\"Latest   sampling date: \", format(date_range[2], \"%Y-%m-%d %H:%M:%S\"), \"\\n\")\n\n\nLatest   sampling date:  2024-11-17 23:54:00 \n\n\n\nDownload Data For This Provider"
  }
]